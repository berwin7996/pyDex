var items = [{"name": ["abs"], "description": ["Return the absolute value of a number.  The argument may be a plain or long  integer or a floating point number.  If the argument is a complex number, its  magnitude is returned.   "]},
{"name": ["all"], "description": ["Return  True  if all elements of the  iterable  are true (or if the iterable  is empty).  Equivalent to:    def   all ( iterable ):        for   element   in   iterable :            if   not   element :                return   False        return   True             New in version 2.5.      "]},
{"name": ["any"], "description": ["Return  True  if any element of the  iterable  is true.  If the iterable  is empty, return  False.  Equivalent to:    def   any ( iterable ):        for   element   in   iterable :            if   element :                return   True        return   False             New in version 2.5.      "]},
{"name": ["basestring"], "description": ["This abstract type is the superclass for  str  and  unicode. It  cannot be called or instantiated, but it can be used to test whether an object  is an instance of  str  or  unicode.  isinstance(obj,    basestring)  is equivalent to  isinstance(obj,   (str,   unicode)).       New in version 2.3.      "]},
{"name": ["bin"], "description": ["Convert an integer number to a binary string. The result is a valid Python  expression.  If  x  is not a Python  int  object, it has to define an   __index__()  method that returns an integer.       New in version 2.6.      "]},
{"name": ["bool"], "description": ["Return a Boolean value, i.e. one of  True  or  False.   x  is converted  using the standard truth testing procedure.  If  x  is false or omitted, this  returns  False ; otherwise it returns  True.  bool  is  also a class, which is a subclass of  int. Class  bool  cannot  be subclassed further.  Its only instances are  False  and   True.       New in version 2.2.1.          Changed in version 2.3:  If no argument is given, this function returns  False.      "]},
{"name": ["bytearray"], "description": ["Return a new array of bytes.  The  bytearray  class is a mutable  sequence of integers in the range 0 <= x < 256.  It has most of the usual  methods of mutable sequences, described in  Mutable Sequence Types, as well  as most methods that the  str  type has, see  String Methods.    The optional  source  parameter can be used to initialize the array in a few  different ways:    If it is  unicode, you must also give the  encoding  (and optionally,   errors ) parameters;  bytearray()  then converts the unicode to  bytes using  unicode.encode().    If it is an  integer, the array will have that size and will be  initialized with null bytes.    If it is an object conforming to the  buffer  interface, a read-only buffer  of the object will be used to initialize the bytes array.    If it is an  iterable, it must be an iterable of integers in the range   0   <=   x   <   256, which are used as the initial contents of the array.    Without an argument, an array of size 0 is created.       New in version 2.6.      "]},
{"name": ["callable"], "description": ["Return  True  if the  object  argument appears callable,   False  if not.  If this  returns true, it is still possible that a call fails, but if it is false,  calling  object  will never succeed.  Note that classes are callable (calling a  class returns a new instance); class instances are callable if they have a   __call__()  method.   "]},
{"name": ["chr"], "description": ["Return a string of one character whose ASCII code is the integer  i.  For  example,  chr(97)  returns the string  'a'. This is the inverse of   ord().  The argument must be in the range [0..255], inclusive;   ValueError  will be raised if  i  is outside that range. See  also  unichr().   "]},
{"name": ["classmethod"], "description": ["Return a class method for  function.    A class method receives the class as implicit first argument, just like an  instance method receives the instance. To declare a class method, use this  idiom:    class   C ( object ):        @classmethod        def   f ( cls,   arg1,   arg2,  ... ):           ...          The  @classmethod  form is a function  decorator  - see the description  of function definitions in  Function definitions  for details.    It can be called either on the class (such as  C.f() ) or on an instance (such  as  C().f() ).  The instance is ignored except for its class. If a class  method is called for a derived class, the derived class object is passed as the  implied first argument.    Class methods are different than C++ or Java static methods. If you want those,  see  staticmethod()  in this section.    For more information on class methods, consult the documentation on the standard  type hierarchy in  The standard type hierarchy.       New in version 2.2.          Changed in version 2.4:  Function decorator syntax added.      "]},
{"name": ["cmp"], "description": ["Compare the two objects  x  and  y  and return an integer according to the  outcome.  The return value is negative if  x   <   y, zero if  x   ==   y  and  strictly positive if  x   >   y.   "]},
{"name": ["compile"], "description": ["Compile the  source  into a code or AST object.  Code objects can be executed  by an  exec  statement or evaluated by a call to  eval().   source  can either be a Unicode string, a  Latin-1  encoded string or an  AST object.  Refer to the  ast  module documentation for information on how to work  with AST objects.    The  filename  argument should give the file from which the code was read;  pass some recognizable value if it wasn't read from a file ( '<string>'  is  commonly used).    The  mode  argument specifies what kind of code must be compiled; it can be   'exec'  if  source  consists of a sequence of statements,  'eval'  if it  consists of a single expression, or  'single'  if it consists of a single  interactive statement (in the latter case, expression statements that  evaluate to something other than  None  will be printed).    The optional arguments  flags  and  dont_inherit  control which future  statements (see  PEP 236 ) affect the compilation of  source.  If neither  is present (or both are zero) the code is compiled with those future  statements that are in effect in the code that is calling  compile().  If the   flags  argument is given and  dont_inherit  is not (or is zero) then the  future statements specified by the  flags  argument are used in addition to  those that would be used anyway. If  dont_inherit  is a non-zero integer then  the  flags  argument is it \u2013 the future statements in effect around the call  to compile are ignored.    Future statements are specified by bits which can be bitwise ORed together to  specify multiple statements.  The bitfield required to specify a given feature  can be found as the  compiler_flag  attribute on  the  _Feature  instance in the  __future__  module.    This function raises  SyntaxError  if the compiled source is invalid,  and  TypeError  if the source contains null bytes.    If you want to parse Python code into its AST representation, see   ast.parse().       Note    When compiling a string with multi-line code in  'single'  or   'eval'  mode, input must be terminated by at least one newline  character.  This is to facilitate detection of incomplete and complete  statements in the  code  module.          Changed in version 2.3:  The  flags  and  dont_inherit  arguments were added.          Changed in version 2.6:  Support for compiling AST objects.          Changed in version 2.7:  Allowed use of Windows and Mac newlines.  Also input in  'exec'  mode  does not have to end in a newline anymore.      "]},
{"name": ["complex"], "description": ["Return a complex number with the value  real  +  imag *j or convert a string or  number to a complex number.  If the first parameter is a string, it will be  interpreted as a complex number and the function must be called without a second  parameter.  The second parameter can never be a string. Each argument may be any  numeric type (including complex). If  imag  is omitted, it defaults to zero and  the function serves as a numeric conversion function like  int(),   long()  and  float().  If both arguments are omitted, returns  0j.       Note    When converting from a string, the string must not contain whitespace  around the central  +  or  -  operator.  For example,   complex('1+2j')  is fine, but  complex('1   +   2j')  raises   ValueError.       The complex type is described in  Numeric Types -- int, float, long, complex.   "]},
{"name": ["delattr"], "description": ["This is a relative of  setattr().  The arguments are an object and a  string.  The string must be the name of one of the object's attributes.  The  function deletes the named attribute, provided the object allows it.  For  example,  delattr(x,   'foobar')  is equivalent to  del   x.foobar.   "]},
{"name": ["dict"], "description": ["Create a new dictionary.  The  dict  object is the dictionary class.  See  dict  and  Mapping Types -- dict  for documentation about this class.    For other containers see the built-in  list,  set, and   tuple  classes, as well as the  collections  module.   "]},
{"name": ["dir"], "description": ["Without arguments, return the list of names in the current local scope.  With an  argument, attempt to return a list of valid attributes for that object.    If the object has a method named  __dir__(), this method will be called and  must return the list of attributes. This allows objects that implement a custom   __getattr__()  or  __getattribute__()  function to customize the way   dir()  reports their attributes.    If the object does not provide  __dir__(), the function tries its best to  gather information from the object's  __dict__  attribute, if defined, and  from its type object.  The resulting list is not necessarily complete, and may  be inaccurate when the object has a custom  __getattr__().    The default  dir()  mechanism behaves differently with different types of  objects, as it attempts to produce the most relevant, rather than complete,  information:    If the object is a module object, the list contains the names of the module's  attributes.    If the object is a type or class object, the list contains the names of its  attributes, and recursively of the attributes of its bases.    Otherwise, the list contains the object's attributes' names, the names of its  class's attributes, and recursively of the attributes of its class's base  classes.    The resulting list is sorted alphabetically.  For example:    >>>  import   struct    >>>  dir ()     # show the names in the module namespace    ['__builtins__', '__doc__', '__name__', 'struct']    >>>  dir ( struct )     # show the names in the struct module    ['Struct', '__builtins__', '__doc__', '__file__', '__name__',     '__package__', '_clearcache', 'calcsize', 'error', 'pack', 'pack_into',     'unpack', 'unpack_from']    >>>  class   Shape ( object ):            def __dir__(self):                return ['area', 'perimeter', 'location']    >>>  s   =   Shape ()    >>>  dir ( s )    ['area', 'perimeter', 'location']             Note    Because  dir()  is supplied primarily as a convenience for use at an  interactive prompt, it tries to supply an interesting set of names more than it  tries to supply a rigorously or consistently defined set of names, and its  detailed behavior may change across releases.  For example, metaclass attributes  are not in the result list when the argument is a class.      "]},
{"name": ["divmod"], "description": ["Take two (non complex) numbers as arguments and return a pair of numbers  consisting of their quotient and remainder when using long division.  With mixed  operand types, the rules for binary arithmetic operators apply.  For plain and  long integers, the result is the same as  (a   //   b,   a   %   b). For floating point  numbers the result is  (q,   a   %   b), where  q  is usually  math.floor(a   /   b)   but may be 1 less than that.  In any case  q   *   b   +   a   %   b  is very close to   a, if  a   %   b  is non-zero it has the same sign as  b, and  0   <=   abs(a   %   b)    <   abs(b).       Changed in version 2.3:  Using  divmod()  with complex numbers is deprecated.      "]},
{"name": ["enumerate"], "description": ["Return an enumerate object.  sequence  must be a sequence, an   iterator, or some other object which supports iteration.  The   next()  method of the iterator returned by  enumerate()  returns a  tuple containing a count (from  start  which defaults to 0) and the  values obtained from iterating over  sequence :    >>>  seasons   =   [ 'Spring',   'Summer',   'Fall',   'Winter' ]    >>>  list ( enumerate ( seasons ))    [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]    >>>  list ( enumerate ( seasons,   start = 1 ))    [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]          Equivalent to:    def   enumerate ( sequence,   start = 0 ):        n   =   start        for   elem   in   sequence :            yield   n,   elem            n   +=   1             New in version 2.3.          Changed in version 2.6:  The  start  parameter was added.      "]},
{"name": ["eval"], "description": ["The arguments are a Unicode or  Latin-1  encoded string and optional  globals and locals.  If provided,  globals  must be a dictionary.  If provided,  locals  can be any mapping object.       Changed in version 2.4:  formerly  locals  was required to be a dictionary.       The  expression  argument is parsed and evaluated as a Python expression  (technically speaking, a condition list) using the  globals  and  locals   dictionaries as global and local namespace.  If the  globals  dictionary is  present and lacks '__builtins__', the current globals are copied into  globals   before  expression  is parsed.  This means that  expression  normally has full  access to the standard  __builtin__  module and restricted environments are  propagated.  If the  locals  dictionary is omitted it defaults to the  globals   dictionary.  If both dictionaries are omitted, the expression is executed in the  environment where  eval()  is called.  The return value is the result of  the evaluated expression. Syntax errors are reported as exceptions.  Example:    >>>  x   =   1    >>>  print   eval ( 'x+1' )    2          This function can also be used to execute arbitrary code objects (such as  those created by  compile() ).  In this case pass a code object instead  of a string.  If the code object has been compiled with  'exec'  as the   mode  argument,  eval() 's return value will be  None.    Hints: dynamic execution of statements is supported by the  exec   statement.  Execution of statements from a file is supported by the   execfile()  function.  The  globals()  and  locals()  functions  returns the current global and local dictionary, respectively, which may be  useful to pass around for use by  eval()  or  execfile().    See  ast.literal_eval()  for a function that can safely evaluate strings  with expressions containing only literals.   "]},
{"name": ["execfile"], "description": ["This function is similar to the  exec  statement, but parses a file  instead of a string.  It is different from the  import  statement in  that it does not use the module administration -- it reads the file  unconditionally and does not create a new module.  [1]    The arguments are a file name and two optional dictionaries.  The file is parsed  and evaluated as a sequence of Python statements (similarly to a module) using  the  globals  and  locals  dictionaries as global and local namespace. If  provided,  locals  can be any mapping object.  Remember that at module level,  globals and locals are the same dictionary. If two separate objects are  passed as  globals  and  locals, the code will be executed as if it were  embedded in a class definition.       Changed in version 2.4:  formerly  locals  was required to be a dictionary.       If the  locals  dictionary is omitted it defaults to the  globals  dictionary.  If both dictionaries are omitted, the expression is executed in the environment  where  execfile()  is called.  The return value is  None.       Note    The default  locals  act as described for function  locals()  below:  modifications to the default  locals  dictionary should not be attempted.  Pass  an explicit  locals  dictionary if you need to see effects of the code on   locals  after function  execfile()  returns.   execfile()  cannot be  used reliably to modify a function's locals.      "]},
{"name": ["file"], "description": ["Constructor function for the  file  type, described further in section   File Objects.  The constructor's arguments are the same as those  of the  open()  built-in function described below.    When opening a file, it's preferable to use  open()  instead of  invoking  this constructor directly.   file  is more suited to type testing (for  example, writing  isinstance(f,   file) ).       New in version 2.2.      "]},
{"name": ["filter"], "description": ["Construct a list from those elements of  iterable  for which  function  returns  true.   iterable  may be either a sequence, a container which supports  iteration, or an iterator.  If  iterable  is a string or a tuple, the result  also has that type; otherwise it is always a list.  If  function  is  None,  the identity function is assumed, that is, all elements of  iterable  that are  false are removed.    Note that  filter(function,   iterable)  is equivalent to  [item   for   item   in    iterable   if   function(item)]  if function is not  None  and  [item   for   item    in   iterable   if   item]  if function is  None.    See  itertools.ifilter()  and  itertools.ifilterfalse()  for iterator  versions of this function, including a variation that filters for elements  where the  function  returns false.   "]},
{"name": ["float"], "description": ["Return a floating point number constructed from a number or string  x.    If the argument is a string, it  must contain a possibly signed decimal or floating point number, possibly  embedded in whitespace. The argument may also be [+|-]nan or [+|-]inf.  Otherwise, the argument may be a plain or long integer  or a floating point number, and a floating point number with the same value  (within Python's floating point precision) is returned.  If no argument is  given, returns  0.0.       Note    When passing in a string, values for NaN and Infinity may be returned, depending  on the underlying C library.  Float accepts the strings nan, inf and -inf for  NaN and positive or negative infinity. The case and a leading + are ignored as  well as a leading - is ignored for NaN. Float always represents NaN and infinity  as nan, inf or -inf.       The float type is described in  Numeric Types -- int, float, long, complex.   "]},
{"name": ["format"], "description": ["Convert a  value  to a \"formatted\" representation, as controlled by   format_spec.  The interpretation of  format_spec  will depend on the type  of the  value  argument, however there is a standard formatting syntax that  is used by most built-in types:  Format Specification Mini-Language.       Note    format(value,   format_spec)  merely calls   value.__format__(format_spec).          New in version 2.6.      "]},
{"name": ["frozenset"], "description": ["Return a new  frozenset  object, optionally with elements taken from   iterable.   frozenset  is a built-in class.  See  frozenset  and   Set Types -- set, frozenset  for documentation about this class.    For other containers see the built-in  set,  list,   tuple, and  dict  classes, as well as the  collections   module.       New in version 2.4.      "]},
{"name": ["getattr"], "description": ["Return the value of the named attribute of  object.   name  must be a string.  If the string is the name of one of the object's attributes, the result is the  value of that attribute.  For example,  getattr(x,   'foobar')  is equivalent to   x.foobar.  If the named attribute does not exist,  default  is returned if  provided, otherwise  AttributeError  is raised.   "]},
{"name": ["globals"], "description": ["Return a dictionary representing the current global symbol table. This is always  the dictionary of the current module (inside a function or method, this is the  module where it is defined, not the module from which it is called).   "]},
{"name": ["hasattr"], "description": ["The arguments are an object and a string.  The result is  True  if the string  is the name of one of the object's attributes,  False  if not. (This is  implemented by calling  getattr(object,   name)  and seeing whether it raises an  exception or not.)   "]},
{"name": ["hash"], "description": ["Return the hash value of the object (if it has one).  Hash values are integers.  They are used to quickly compare dictionary keys during a dictionary lookup.  Numeric values that compare equal have the same hash value (even if they are of  different types, as is the case for 1 and 1.0).   "]},
{"name": ["help"], "description": ["Invoke the built-in help system.  (This function is intended for interactive  use.)  If no argument is given, the interactive help system starts on the  interpreter console.  If the argument is a string, then the string is looked up  as the name of a module, function, class, method, keyword, or documentation  topic, and a help page is printed on the console.  If the argument is any other  kind of object, a help page on the object is generated.    This function is added to the built-in namespace by the  site  module.       New in version 2.2.      "]},
{"name": ["hex"], "description": ["Convert an integer number (of any size) to a lowercase hexadecimal string  prefixed with \"0x\", for example:    >>>  hex ( 255 )    '0xff'    >>>  hex ( - 42 )    '-0x2a'    >>>  hex ( 1L )    '0x1L'          If x is not a Python  int  or  long  object, it has to  define an __index__() method that returns an integer.    See also  int()  for converting a hexadecimal string to an  integer using a base of 16.       Note    To obtain a hexadecimal string representation for a float, use the   float.hex()  method.          Changed in version 2.4:  Formerly only returned an unsigned literal.      "]},
{"name": ["id"], "description": ["Return the \"identity\" of an object.  This is an integer (or long integer) which  is guaranteed to be unique and constant for this object during its lifetime.  Two objects with non-overlapping lifetimes may have the same  id()   value.       CPython implementation detail:  This is the address of the object in memory.      "]},
{"name": ["input"], "description": ["Equivalent to  eval(raw_input(prompt)).    This function does not catch user errors. If the input is not syntactically  valid, a  SyntaxError  will be raised. Other exceptions may be raised if  there is an error during evaluation.    If the  readline  module was loaded, then  input()  will use it to  provide elaborate line editing and history features.    Consider using the  raw_input()  function for general input from users.   "]},
{"name": ["int"], "description": ["Return an integer object constructed from a number or string  x, or return  0  if no  arguments are given.  If  x  is a number, it can be a plain integer, a long  integer, or a floating point number.  If  x  is floating point, the conversion  truncates towards zero.  If the argument is outside the integer range, the  function returns a long object instead.    If  x  is not a number or if  base  is given, then  x  must be a string or  Unicode object representing an  integer literal  in radix   base.  Optionally, the literal can be  preceded by  +  or  -  (with no space in between) and surrounded by  whitespace.  A base-n literal consists of the digits 0 to n-1, with  a   to  z  (or  A  to  Z ) having  values 10 to 35.  The default  base  is 10. The allowed values are 0 and 2-36.  Base-2, -8, and -16 literals can be optionally prefixed with  0b / 0B,   0o / 0O / 0, or  0x / 0X, as with integer literals in code.  Base 0 means to interpret the string exactly as an integer literal, so that  the actual base is 2, 8, 10, or 16.    The integer type is described in  Numeric Types -- int, float, long, complex.   "]},
{"name": ["isinstance"], "description": ["Return true if the  object  argument is an instance of the  classinfo  argument,  or of a (direct, indirect or  virtual ) subclass  thereof.  Also return true if  classinfo   is a type object (new-style class) and  object  is an object of that type or of  a (direct, indirect or  virtual ) subclass  thereof.  If  object  is not a class instance or  an object of the given type, the function always returns false.  If  classinfo   is neither a class object nor a type object, it may be a tuple of class or type  objects, or may recursively contain other such tuples (other sequence types are  not accepted).  If  classinfo  is not a class, type, or tuple of classes, types,  and such tuples, a  TypeError  exception is raised.       Changed in version 2.2:  Support for a tuple of type information was added.      "]},
{"name": ["issubclass"], "description": ["Return true if  class  is a subclass (direct, indirect or  virtual ) of  classinfo.  A  class is considered a subclass of itself.  classinfo  may be a tuple of class  objects, in which case every entry in  classinfo  will be checked. In any other  case, a  TypeError  exception is raised.       Changed in version 2.3:  Support for a tuple of type information was added.      "]},
{"name": ["iter"], "description": ["Return an  iterator  object.  The first argument is interpreted very differently  depending on the presence of the second argument. Without a second argument,  o   must be a collection object which supports the iteration protocol (the   __iter__()  method), or it must support the sequence protocol (the   __getitem__()  method with integer arguments starting at  0 ).  If it  does not support either of those protocols,  TypeError  is raised. If the  second argument,  sentinel, is given, then  o  must be a callable object.  The  iterator created in this case will call  o  with no arguments for each call to  its  next()  method; if the value returned is equal to  sentinel,   StopIteration  will be raised, otherwise the value will be returned.    One useful application of the second form of  iter()  is to read lines of  a file until a certain line is reached.  The following example reads a file  until the  readline()  method returns an empty string:    with   open ( 'mydata.txt' )   as   fp :        for   line   in   iter ( fp. readline,   '' ):            process_line ( line )             New in version 2.2.      "]},
{"name": ["len"], "description": ["Return the length (the number of items) of an object.  The argument may be a  sequence (such as a string, bytes, tuple, list, or range) or a collection  (such as a dictionary, set, or frozen set).   "]},
{"name": ["list"], "description": ["Return a list whose items are the same and in the same order as  iterable's  items.   iterable  may be either a sequence, a container that supports  iteration, or an iterator object.  If  iterable  is already a list, a copy is  made and returned, similar to  iterable[:].  For instance,  list('abc')   returns  ['a',   'b',   'c']  and  list(   (1,   2,   3)   )  returns  [1,   2,   3].  If  no argument is given, returns a new empty list,  [].    list  is a mutable sequence type, as documented in   Sequence Types -- str, unicode, list, tuple, bytearray, buffer, xrange. For other containers see the built in  dict,   set, and  tuple  classes, and the  collections  module.   "]},
{"name": ["locals"], "description": ["Update and return a dictionary representing the current local symbol table.  Free variables are returned by  locals()  when it is called in function  blocks, but not in class blocks.       Note    The contents of this dictionary should not be modified; changes may not  affect the values of local and free variables used by the interpreter.      "]},
{"name": ["long"], "description": ["Return a long integer object constructed from a string or number  x.  If the argument is a string, it  must contain a possibly signed number of arbitrary size, possibly embedded in  whitespace. The  base  argument is interpreted in the same way as for   int(), and may only be given when  x  is a string. Otherwise, the argument  may be a plain or long integer or a floating point number, and a long integer  with the same value is returned.    Conversion of floating point numbers to  integers truncates (towards zero).  If no arguments are given, returns  0L.    The long type is described in  Numeric Types -- int, float, long, complex.   "]},
{"name": ["map"], "description": ["Apply  function  to every item of  iterable  and return a list of the results.  If additional  iterable  arguments are passed,  function  must take that many  arguments and is applied to the items from all iterables in parallel.  If one  iterable is shorter than another it is assumed to be extended with  None   items.  If  function  is  None, the identity function is assumed; if there  are multiple arguments,  map()  returns a list consisting of tuples  containing the corresponding items from all iterables (a kind of transpose  operation).  The  iterable  arguments may be a sequence  or any iterable object;  the result is always a list.   "]},
{"name": ["max"], "description": ["Return the largest item in an iterable or the largest of two or more  arguments.    If one positional argument is provided,  iterable  must be a non-empty  iterable (such as a non-empty string, tuple or list).  The largest item  in the iterable is returned.  If two or more positional arguments are  provided, the largest of the positional arguments is returned.    The optional  key  argument specifies a one-argument ordering function like that  used for  list.sort().  The  key  argument, if supplied, must be in keyword  form (for example,  max(a,b,c,key=func) ).       Changed in version 2.5:  Added support for the optional  key  argument.      "]},
{"name": ["memoryview"], "description": ["Return a \"memory view\" object created from the given argument.  See   memoryview type  for more information.   "]},
{"name": ["min"], "description": ["Return the smallest item in an iterable or the smallest of two or more  arguments.    If one positional argument is provided,  iterable  must be a non-empty  iterable (such as a non-empty string, tuple or list).  The smallest item  in the iterable is returned.  If two or more positional arguments are  provided, the smallest of the positional arguments is returned.    The optional  key  argument specifies a one-argument ordering function like that  used for  list.sort().  The  key  argument, if supplied, must be in keyword  form (for example,  min(a,b,c,key=func) ).       Changed in version 2.5:  Added support for the optional  key  argument.      "]},
{"name": ["next"], "description": ["Retrieve the next item from the  iterator  by calling its   next()  method.  If  default  is given, it is returned if the  iterator is exhausted, otherwise  StopIteration  is raised.       New in version 2.6.      "]},
{"name": ["object"], "description": ["Return a new featureless object.   object  is a base for all new style  classes.  It has the methods that are common to all instances of new style  classes.       New in version 2.2.          Changed in version 2.3:  This function does not accept any arguments. Formerly, it accepted arguments but  ignored them.      "]},
{"name": ["oct"], "description": ["Convert an integer number (of any size) to an octal string.  The result is a  valid Python expression.       Changed in version 2.4:  Formerly only returned an unsigned literal.      "]},
{"name": ["open"], "description": ["Open a file, returning an object of the  file  type described in  section  File Objects.  If the file cannot be opened,   IOError  is raised.  When opening a file, it's preferable to use   open()  instead of invoking the  file  constructor directly.    The first two arguments are the same as for  stdio's  fopen() :   name  is the file name to be opened, and  mode  is a string indicating how  the file is to be opened.    The most commonly-used values of  mode  are  'r'  for reading,  'w'  for  writing (truncating the file if it already exists), and  'a'  for appending  (which on  some  Unix systems means that  all  writes append to the end of the  file regardless of the current seek position).  If  mode  is omitted, it  defaults to  'r'.  The default is to use text mode, which may convert   '\  '  characters to a platform-specific representation on writing and back  on reading.  Thus, when opening a binary file, you should append  'b'  to  the  mode  value to open the file in binary mode, which will improve  portability.  (Appending  'b'  is useful even on systems that don't treat  binary and text files differently, where it serves as documentation.)  See below  for more possible values of  mode.    The optional  buffering  argument specifies the file's desired buffer size: 0  means unbuffered, 1 means line buffered, any other positive value means use a  buffer of (approximately) that size (in bytes).  A negative  buffering  means  to use the system default, which is usually line buffered for tty devices and  fully buffered for other files.  If omitted, the system default is used.  [2]    Modes  'r+',  'w+'  and  'a+'  open the file for updating (reading and writing);  note that  'w+'  truncates the file.  Append  'b'  to the mode to open the file in  binary mode, on systems that differentiate between binary and text files; on  systems that don't have this distinction, adding the  'b'  has no effect.    In addition to the standard  fopen()  values  mode  may be  'U'  or   'rU'.  Python is usually built with  universal newlines  support;  supplying  'U'  opens the file as a text file, but lines may be terminated  by any of the following: the Unix end-of-line convention  '\  ',  the  Macintosh convention  '\\r', or the Windows convention  '\\r\  '. All of  these external representations are seen as  '\  '  by the Python program.  If Python is built without universal newlines support a  mode  with  'U'   is the same as normal text mode.  Note that file objects so opened also have  an attribute called  newlines  which has a value of  None  (if no  newlines have yet been seen),  '\  ',  '\\r',  '\\r\  ', or a tuple  containing all the newline types seen.    Python enforces that the mode, after stripping  'U', begins with  'r',   'w'  or  'a'.    Python provides many file handling modules including   fileinput,  os,  os.path,  tempfile, and   shutil.       Changed in version 2.5:  Restriction on first letter of mode string introduced.      "]},
{"name": ["ord"], "description": ["Given a string of length one, return an integer representing the Unicode code  point of the character when the argument is a unicode object, or the value of  the byte when the argument is an 8-bit string. For example,  ord('a')  returns  the integer  97,  ord(niccage)  returns  8224.  This is the inverse of   chr()  for 8-bit strings and of  unichr()  for unicode objects.  If a  unicode argument is given and Python was built with UCS2 Unicode, then the  character's code point must be in the range [0..65535] inclusive; otherwise the  string length is two, and a  TypeError  will be raised.   "]},
{"name": ["pow"], "description": ["Return  x  to the power  y ; if  z  is present, return  x  to the power  y,  modulo  z  (computed more efficiently than  pow(x,   y)   %   z ). The two-argument  form  pow(x,   y)  is equivalent to using the power operator:  x**y.    The arguments must have numeric types.  With mixed operand types, the coercion  rules for binary arithmetic operators apply.  For int and long int operands, the  result has the same type as the operands (after coercion) unless the second  argument is negative; in that case, all arguments are converted to float and a  float result is delivered.  For example,  10**2  returns  100, but   10**-2  returns  0.01.  (This last feature was added in Python 2.2.  In  Python 2.1 and before, if both arguments were of integer types and the second  argument was negative, an exception was raised.) If the second argument is  negative, the third argument must be omitted. If  z  is present,  x  and  y   must be of integer types, and  y  must be non-negative.  (This restriction was  added in Python 2.2.  In Python 2.1 and before, floating 3-argument  pow()   returned platform-dependent results depending on floating-point rounding  accidents.)   "]},
{"name": ["print"], "description": ["Print  objects  to the stream  file, separated by  sep  and followed by   end.   sep,  end  and  file, if present, must be given as keyword  arguments.    All non-keyword arguments are converted to strings like  str()  does and  written to the stream, separated by  sep  and followed by  end.  Both  sep   and  end  must be strings; they can also be  None, which means to use the  default values.  If no  objects  are given,  print()  will just write   end.    The  file  argument must be an object with a  write(string)  method; if it  is not present or  None,  sys.stdout  will be used.  Output buffering  is determined by  file.  Use  file.flush()  to ensure, for instance,  immediate appearance on a screen.       Note    This function is not normally available as a built-in since the name   print  is recognized as the  print  statement.  To disable the  statement and use the  print()  function, use this future statement at  the top of your module:    from   __future__   import   print_function                New in version 2.6.      "]},
{"name": ["property"], "description": ["Return a property attribute for  new-style class es (classes that  derive from  object ).    fget  is a function for getting an attribute value.   fset  is a function  for setting an attribute value.  fdel  is a function for deleting an attribute  value.  And  doc  creates a docstring for the attribute.    A typical use is to define a managed attribute  x :    class   C ( object ):        def   __init__ ( self ):            self. _x   =   None          def   getx ( self ):            return   self. _x          def   setx ( self,   value ):            self. _x   =   value          def   delx ( self ):            del   self. _x          x   =   property ( getx,   setx,   delx,   \"I'm the 'x' property.\" )          If  c  is an instance of  C,  c.x  will invoke the getter,   c.x   =   value  will invoke the setter and  del   c.x  the deleter.    If given,  doc  will be the docstring of the property attribute. Otherwise, the  property will copy  fget's docstring (if it exists).  This makes it possible to  create read-only properties easily using  property()  as a  decorator :    class   Parrot ( object ):        def   __init__ ( self ):            self. _voltage   =   100000          @property        def   voltage ( self ):            \"\"\"Get the current voltage.\"\"\"            return   self. _voltage          The  @property  decorator turns the  voltage()  method into a \"getter\"  for a read-only attribute with the same name, and it sets the docstring for   voltage  to \"Get the current voltage.\"    A property object has  getter,  setter,  and  deleter  methods usable as decorators that create a  copy of the property with the corresponding accessor function set to the  decorated function.  This is best explained with an example:    class   C ( object ):        def   __init__ ( self ):            self. _x   =   None          @property        def   x ( self ):            \"\"\"I'm the 'x' property.\"\"\"            return   self. _x          @x.setter        def   x ( self,   value ):            self. _x   =   value          @x.deleter        def   x ( self ):            del   self. _x          This code is exactly equivalent to the first example.  Be sure to give the  additional functions the same name as the original property ( x  in this  case.)    The returned property object also has the attributes  fget,  fset, and   fdel  corresponding to the constructor arguments.       New in version 2.2.          Changed in version 2.5:  Use  fget's docstring if no  doc  given.          Changed in version 2.6:  The  getter,  setter, and  deleter  attributes were added.      "]},
{"name": ["range"], "description": ["This is a versatile function to create lists containing arithmetic progressions.  It is most often used in  for  loops.  The arguments must be plain  integers.  If the  step  argument is omitted, it defaults to  1.  If the   start  argument is omitted, it defaults to  0.  The full form returns a list  of plain integers  [start,   start   +   step,   start   +   2   *   step,  ...].  If  step   is positive, the last element is the largest  start   +   i   *   step  less than   stop ; if  step  is negative, the last element is the smallest  start   +   i   *    step  greater than  stop.   step  must not be zero (or else  ValueError   is raised).  Example:    >>>  range ( 10 )    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]    >>>  range ( 1,   11 )    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]    >>>  range ( 0,   30,   5 )    [0, 5, 10, 15, 20, 25]    >>>  range ( 0,   10,   3 )    [0, 3, 6, 9]    >>>  range ( 0,   - 10,   - 1 )    [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]    >>>  range ( 0 )    []    >>>  range ( 1,   0 )    []         "]},
{"name": ["raw_input"], "description": ["If the  prompt  argument is present, it is written to standard output without a  trailing newline.  The function then reads a line from input, converts it to a  string (stripping a trailing newline), and returns that. When EOF is read,   EOFError  is raised. Example:    >>>  s   =   raw_input ( '--> ' )    --> Monty Python's Flying Circus    >>>  s    \"Monty Python's Flying Circus\"          If the  readline  module was loaded, then  raw_input()  will use it to  provide elaborate line editing and history features.   "]},
{"name": ["reduce"], "description": ["Apply  function  of two arguments cumulatively to the items of  iterable, from  left to right, so as to reduce the iterable to a single value.  For example,   reduce(lambda   x,   y:   x+y,   [1,   2,   3,   4,   5])  calculates  ((((1+2)+3)+4)+5).  The left argument,  x, is the accumulated value and the right argument,  y, is  the update value from the  iterable.  If the optional  initializer  is present,  it is placed before the items of the iterable in the calculation, and serves as  a default when the iterable is empty.  If  initializer  is not given and   iterable  contains only one item, the first item is returned.  Roughly equivalent to:    def   reduce ( function,   iterable,   initializer = None ):        it   =   iter ( iterable )        if   initializer   is   None :            try :                initializer   =   next ( it )            except   StopIteration :                raise   TypeError ( 'reduce() of empty sequence with no initial value' )        accum_value   =   initializer        for   x   in   it :            accum_value   =   function ( accum_value,   x )        return   accum_value         "]},
{"name": ["reload"], "description": ["Reload a previously imported  module.  The argument must be a module object, so  it must have been successfully imported before.  This is useful if you have  edited the module source file using an external editor and want to try out the  new version without leaving the Python interpreter.  The return value is the  module object (the same as the  module  argument).    When  reload(module)  is executed:    Python modules' code is recompiled and the module-level code reexecuted,  defining a new set of objects which are bound to names in the module's  dictionary.  The  init  function of extension modules is not called a second  time.    As with all other objects in Python the old objects are only reclaimed after  their reference counts drop to zero.    The names in the module namespace are updated to point to any new or changed  objects.    Other references to the old objects (such as names external to the module) are  not rebound to refer to the new objects and must be updated in each namespace  where they occur if that is desired.    There are a number of other caveats:    If a module is syntactically correct but its initialization fails, the first   import  statement for it does not bind its name locally, but does  store a (partially initialized) module object in  sys.modules.  To reload the  module you must first  import  it again (this will bind the name to the  partially initialized module object) before you can  reload()  it.    When a module is reloaded, its dictionary (containing the module's global  variables) is retained.  Redefinitions of names will override the old  definitions, so this is generally not a problem.  If the new version of a module  does not define a name that was defined by the old version, the old definition  remains.  This feature can be used to the module's advantage if it maintains a  global table or cache of objects -- with a  try  statement it can test  for the table's presence and skip its initialization if desired:    try :        cache    except   NameError :        cache   =   {}          It is legal though generally not very useful to reload built-in or dynamically  loaded modules, except for  sys,  __main__  and  __builtin__.  In many cases, however, extension modules are not designed to be initialized  more than once, and may fail in arbitrary ways when reloaded.    If a module imports objects from another module using  from ...   import ..., calling  reload()  for the other module does not  redefine the objects imported from it -- one way around this is to re-execute  the  from  statement, another is to use  import  and qualified  names ( module.*name*) instead.    If a module instantiates instances of a class, reloading the module that defines  the class does not affect the method definitions of the instances -- they  continue to use the old class definition.  The same is true for derived classes.   "]},
{"name": ["repr"], "description": ["Return a string containing a printable representation of an object.  This is  the same value yielded by conversions (reverse quotes).  It is sometimes  useful to be able to access this operation as an ordinary function.  For many  types, this function makes an attempt to return a string that would yield an  object with the same value when passed to  eval(), otherwise the  representation is a string enclosed in angle brackets that contains the name  of the type of the object together with additional information often  including the name and address of the object.  A class can control what this  function returns for its instances by defining a  __repr__()  method.   "]},
{"name": ["reversed"], "description": ["Return a reverse  iterator.   seq  must be an object which has  a  __reversed__()  method or supports the sequence protocol (the   __len__()  method and the  __getitem__()  method with integer  arguments starting at  0 ).       New in version 2.4.          Changed in version 2.6:  Added the possibility to write a custom  __reversed__()  method.      "]},
{"name": ["round"], "description": ["Return the floating point value  number  rounded to  ndigits  digits after  the decimal point.  If  ndigits  is omitted, it defaults to zero. The result  is a floating point number.  Values are rounded to the closest multiple of  10 to the power minus  ndigits ; if two multiples are equally close,  rounding is done away from 0 (so, for example,  round(0.5)  is  1.0  and   round(-0.5)  is  -1.0 ).       Note    The behavior of  round()  for floats can be surprising: for example,   round(2.675,   2)  gives  2.67  instead of the expected  2.68.  This is not a bug: it's a result of the fact that most decimal fractions  can't be represented exactly as a float.  See  Floating Point Arithmetic:  Issues and Limitations  for  more information.      "]},
{"name": ["set"], "description": ["Return a new  set  object, optionally with elements taken from   iterable.   set  is a built-in class.  See  set  and   Set Types -- set, frozenset  for documentation about this class.    For other containers see the built-in  frozenset,  list,   tuple, and  dict  classes, as well as the  collections   module.       New in version 2.4.      "]},
{"name": ["setattr"], "description": ["This is the counterpart of  getattr().  The arguments are an object, a  string and an arbitrary value.  The string may name an existing attribute or a  new attribute.  The function assigns the value to the attribute, provided the  object allows it.  For example,  setattr(x,   'foobar',   123)  is equivalent to   x.foobar   =   123.   "]},
{"name": ["slice "], "description": ["Return a  slice  object representing the set of indices specified by   range(start,   stop,   step).  The  start  and  step  arguments default to   None.  Slice objects have read-only data attributes  start,   stop  and  step  which merely return the argument  values (or their default).  They have no other explicit functionality;  however they are used by Numerical Python and other third party extensions.  Slice objects are also generated when extended indexing syntax is used.  For  example:  a[start:stop:step]  or  a[start:stop,   i].  See   itertools.islice()  for an alternate version that returns an iterator.   "]},
{"name": ["sorted"], "description": ["Return a new sorted list from the items in  iterable.    The optional arguments  cmp,  key, and  reverse  have the same meaning as  those for the  list.sort()  method (described in section   Mutable Sequence Types ).    cmp  specifies a custom comparison function of two arguments (iterable  elements) which should return a negative, zero or positive number depending on  whether the first argument is considered smaller than, equal to, or larger than  the second argument:  cmp=lambda   x,y:   cmp(x.lower(),   y.lower()).  The default  value is  None.    key  specifies a function of one argument that is used to extract a comparison  key from each list element:  key=str.lower.  The default value is  None   (compare the elements directly).    reverse  is a boolean value.  If set to  True, then the list elements are  sorted as if each comparison were reversed.    In general, the  key  and  reverse  conversion processes are much faster  than specifying an equivalent  cmp  function.  This is because  cmp  is  called multiple times for each list element while  key  and  reverse  touch  each element only once.  Use  functools.cmp_to_key()  to convert an  old-style  cmp  function to a  key  function.    The built-in  sorted()  function is guaranteed to be stable. A sort is  stable if it guarantees not to change the relative order of elements that  compare equal -- this is helpful for sorting in multiple passes (for  example, sort by department, then by salary grade).    For sorting examples and a brief sorting tutorial, see  Sorting HOW TO.       New in version 2.4.      "]},
{"name": ["staticmethod"], "description": ["Return a static method for  function.    A static method does not receive an implicit first argument. To declare a static  method, use this idiom:    class   C ( object ):        @staticmethod        def   f ( arg1,   arg2,  ... ):           ...          The  @staticmethod  form is a function  decorator  - see the  description of function definitions in  Function definitions  for details.    It can be called either on the class (such as  C.f() ) or on an instance (such  as  C().f() ).  The instance is ignored except for its class.    Static methods in Python are similar to those found in Java or C++. Also see   classmethod()  for a variant that is useful for creating alternate  class constructors.    For more information on static methods, consult the documentation on the  standard type hierarchy in  The standard type hierarchy.       New in version 2.2.          Changed in version 2.4:  Function decorator syntax added.      "]},
{"name": ["str"], "description": ["Return a string containing a nicely printable representation of an object.  For  strings, this returns the string itself.  The difference with  repr(object)   is that  str(object)  does not always attempt to return a string that is  acceptable to  eval() ; its goal is to return a printable string.  If no  argument is given, returns the empty string,  ''.    For more information on strings see  Sequence Types -- str, unicode, list, tuple, bytearray, buffer, xrange  which describes sequence  functionality (strings are sequences), and also the string-specific methods  described in the  String Methods  section. To output formatted strings  use template strings or the  %  operator described in the   String Formatting Operations  section. In addition see the  String Services   section. See also  unicode().   "]},
{"name": ["sum"], "description": ["Sums  start  and the items of an  iterable  from left to right and returns the  total.   start  defaults to  0. The  iterable's items are normally numbers,  and the start value is not allowed to be a string.    For some use cases, there are good alternatives to  sum().  The preferred, fast way to concatenate a sequence of strings is by calling   ''.join(sequence).  To add floating point values with extended precision,  see  math.fsum().  To concatenate a series of iterables, consider using   itertools.chain().       New in version 2.3.      "]},
{"name": ["super"], "description": ["Return a proxy object that delegates method calls to a parent or sibling  class of  type.  This is useful for accessing inherited methods that have  been overridden in a class. The search order is same as that used by   getattr()  except that the  type  itself is skipped.    The  __mro__  attribute of the  type  lists the method  resolution search order used by both  getattr()  and  super().  The  attribute is dynamic and can change whenever the inheritance hierarchy is  updated.    If the second argument is omitted, the super object returned is unbound.  If  the second argument is an object,  isinstance(obj,   type)  must be true.  If  the second argument is a type,  issubclass(type2,   type)  must be true (this  is useful for classmethods).       Note    super()  only works for  new-style class es.       There are two typical use cases for  super.  In a class hierarchy with  single inheritance,  super  can be used to refer to parent classes without  naming them explicitly, thus making the code more maintainable.  This use  closely parallels the use of  super  in other programming languages.    The second use case is to support cooperative multiple inheritance in a  dynamic execution environment.  This use case is unique to Python and is  not found in statically compiled languages or languages that only support  single inheritance.  This makes it possible to implement \"diamond diagrams\"  where multiple base classes implement the same method.  Good design dictates  that this method have the same calling signature in every case (because the  order of calls is determined at runtime, because that order adapts  to changes in the class hierarchy, and because that order can include  sibling classes that are unknown prior to runtime).    For both use cases, a typical superclass call looks like this:    class   C ( B ):        def   method ( self,   arg ):            super ( C,   self ). method ( arg )          Note that  super()  is implemented as part of the binding process for  explicit dotted attribute lookups such as  super().__getitem__(name).  It does so by implementing its own  __getattribute__()  method for searching  classes in a predictable order that supports cooperative multiple inheritance.  Accordingly,  super()  is undefined for implicit lookups using statements or  operators such as  super()[name].    Also note that  super()  is not limited to use inside methods.  The two  argument form specifies the arguments exactly and makes the appropriate  references.    For practical suggestions on how to design cooperative classes using   super(), see  guide to using super().       New in version 2.2.      "]},
{"name": ["tuple"], "description": ["Return a tuple whose items are the same and in the same order as  iterable's  items.   iterable  may be a sequence, a container that supports iteration, or an  iterator object. If  iterable  is already a tuple, it is returned unchanged.  For instance,  tuple('abc')  returns  ('a',   'b',   'c')  and  tuple([1,   2,    3])  returns  (1,   2,   3).  If no argument is given, returns a new empty  tuple,  ().    tuple  is an immutable sequence type, as documented in   Sequence Types -- str, unicode, list, tuple, bytearray, buffer, xrange. For other containers see the built in  dict,   list, and  set  classes, and the  collections  module.   "]},
{"name": ["type type"], "description": ["With one argument, return the type of an  object.  The return value is a  type object.  The  isinstance()  built-in function is recommended for  testing the type of an object.    With three arguments, return a new type object.  This is essentially a  dynamic form of the  class  statement. The  name  string is the  class name and becomes the  __name__  attribute; the  bases  tuple  itemizes the base classes and becomes the  __bases__  attribute;  and the  dict  dictionary is the namespace containing definitions for class  body and becomes the  __dict__   attribute.  For example, the  following two statements create identical  type  objects:    >>>  class   X ( object ):   ...       a   =   1   ...    >>>  X   =   type ( 'X',   ( object,),   dict ( a = 1 ))             New in version 2.2.      "]},
{"name": ["unichr"], "description": ["Return the Unicode string of one character whose Unicode code is the integer   i.  For example,  unichr(97)  returns the string  u'a'.  This is the  inverse of  ord()  for Unicode strings.  The valid range for the argument  depends how Python was configured - it may be either UCS2 [0..0xFFFF] or UCS4  [0..0x10FFFF].  ValueError  is raised otherwise. For ASCII and 8-bit  strings see  chr().       New in version 2.0.      "]},
{"name": ["unicode"], "description": ["Return the Unicode string version of  object  using one of the following modes:    If  encoding  and/or  errors  are given,  unicode()  will decode the object  which can either be an 8-bit string or a character buffer using the codec for   encoding. The  encoding  parameter is a string giving the name of an encoding;  if the encoding is not known,  LookupError  is raised. Error handling is  done according to  errors ; this specifies the treatment of characters which are  invalid in the input encoding.  If  errors  is  'strict'  (the default), a   ValueError  is raised on errors, while a value of  'ignore'  causes  errors to be silently ignored, and a value of  'replace'  causes the official  Unicode replacement character,  U+FFFD, to be used to replace input  characters which cannot be decoded.  See also the  codecs  module.    If no optional parameters are given,  unicode()  will mimic the behaviour of   str()  except that it returns Unicode strings instead of 8-bit strings. More  precisely, if  object  is a Unicode string or subclass it will return that  Unicode string without any additional decoding applied.    For objects which provide a  __unicode__()  method, it will call this method  without arguments to create a Unicode string. For all other objects, the 8-bit  string version or representation is requested and then converted to a Unicode  string using the codec for the default encoding in  'strict'  mode.    For more information on Unicode strings see  Sequence Types -- str, unicode, list, tuple, bytearray, buffer, xrange  which describes  sequence functionality (Unicode strings are sequences), and also the  string-specific methods described in the  String Methods  section. To  output formatted strings use template strings or the  %  operator described  in the  String Formatting Operations  section. In addition see the   String Services  section. See also  str().       New in version 2.0.          Changed in version 2.2:  Support for  __unicode__()  added.      "]},
{"name": ["vars"], "description": ["Return the  __dict__  attribute for a module, class, instance,  or any other object with a  __dict__  attribute.    Objects such as modules and instances have an updateable  __dict__   attribute; however, other objects may have write restrictions on their   __dict__  attributes (for example, new-style classes use a  dictproxy to prevent direct dictionary updates).    Without an argument,  vars()  acts like  locals().  Note, the  locals dictionary is only useful for reads since updates to the locals  dictionary are ignored.   "]},
{"name": ["xrange"], "description": ["This function is very similar to  range(), but returns an  xrange  object   instead of a list.  This is an opaque sequence type which yields the same values  as the corresponding list, without actually storing them all simultaneously.  The advantage of  xrange()  over  range()  is minimal (since   xrange()  still has to create the values when asked for them) except when a  very large range is used on a memory-starved machine or when all of the range's  elements are never used (such as when the loop is usually terminated with   break ).  For more information on xrange objects, see   XRange Type  and  Sequence Types -- str, unicode, list, tuple, bytearray, buffer, xrange.       CPython implementation detail:   xrange()  is intended to be simple and fast.  Implementations may  impose restrictions to achieve this.  The C implementation of Python  restricts all arguments to native C longs (\"short\" Python integers), and  also requires that the number of elements fit in a native C long.  If a  larger range is needed, an alternate version can be crafted using the   itertools  module:  islice(count(start,   step),    (stop-start+step-1+2*(step<0))//step).      "]},
{"name": ["zip"], "description": ["This function returns a list of tuples, where the  i -th tuple contains the   i -th element from each of the argument sequences or iterables. The returned  list is truncated in length to the length of the shortest argument sequence.  When there are multiple arguments which are all of the same length,  zip()   is similar to  map()  with an initial argument of  None. With a single  sequence argument, it returns a list of 1-tuples. With no arguments, it returns  an empty list.    The left-to-right evaluation order of the iterables is guaranteed. This  makes possible an idiom for clustering a data series into n-length groups  using  zip(*[iter(s)]*n).    zip()  in conjunction with the  *  operator can be used to unzip a  list:    >>>  x   =   [ 1,   2,   3 ]    >>>  y   =   [ 4,   5,   6 ]    >>>  zipped   =   zip ( x,   y )    >>>  zipped    [(1, 4), (2, 5), (3, 6)]    >>>  x2,   y2   =   zip ( * zipped )    >>>  x   ==   list ( x2 )   and   y   ==   list ( y2 )    True             New in version 2.0.          Changed in version 2.4:  Formerly,  zip()  required at least one argument and  zip()  raised a   TypeError  instead of returning an empty list.      "]},
{"name": ["__import__"], "description": ["   Note    This is an advanced function that is not needed in everyday Python  programming, unlike  importlib.import_module().       This function is invoked by the  import  statement.  It can be  replaced (by importing the  __builtin__  module and assigning to   __builtin__.__import__ ) in order to change semantics of the   import  statement, but nowadays it is usually simpler to use import  hooks (see  PEP 302 ).  Direct use of  __import__()  is rare, except in  cases where you want to import a module whose name is only known at runtime.    The function imports the module  name, potentially using the given  globals   and  locals  to determine how to interpret the name in a package context.  The  fromlist  gives the names of objects or submodules that should be  imported from the module given by  name.  The standard implementation does  not use its  locals  argument at all, and uses its  globals  only to  determine the package context of the  import  statement.    level  specifies whether to use absolute or relative imports.  The default  is  -1  which indicates both absolute and relative imports will be  attempted.   0  means only perform absolute imports.  Positive values for   level  indicate the number of parent directories to search relative to the  directory of the module calling  __import__().    When the  name  variable is of the form  package.module, normally, the  top-level package (the name up till the first dot) is returned,  not  the  module named by  name.  However, when a non-empty  fromlist  argument is  given, the module named by  name  is returned.    For example, the statement  import   spam  results in bytecode resembling the  following code:    spam   =   __import__ ( 'spam',   globals (),   locals (),   [],   - 1 )          The statement  import   spam.ham  results in this call:    spam   =   __import__ ( 'spam.ham',   globals (),   locals (),   [],   - 1 )          Note how  __import__()  returns the toplevel module here because this is  the object that is bound to a name by the  import  statement.    On the other hand, the statement  from   spam.ham   import   eggs,   sausage   as    saus  results in    _temp   =   __import__ ( 'spam.ham',   globals (),   locals (),   [ 'eggs',   'sausage' ],   - 1 )    eggs   =   _temp. eggs    saus   =   _temp. sausage          Here, the  spam.ham  module is returned from  __import__().  From this  object, the names to import are retrieved and assigned to their respective  names.    If you simply want to import a module (potentially within a package) by name,  use  importlib.import_module().       Changed in version 2.5:  The level parameter was added.          Changed in version 2.5:  Keyword support for parameters was added.      "]},
{"name": ["apply"], "description": ["The  function  argument must be a callable object (a user-defined or built-in  function or method, or a class object) and the  args  argument must be a  sequence.  The  function  is called with  args  as the argument list; the number  of arguments is the length of the tuple. If the optional  keywords  argument is  present, it must be a dictionary whose keys are strings.  It specifies keyword  arguments to be added to the end of the argument list. Calling  apply()  is  different from just calling  function(args), since in that case there is  always exactly one argument.  The use of  apply()  is equivalent to   function(*args,   **keywords).       Deprecated since version 2.3:  Use  function(*args,   **keywords)  instead of   apply(function,   args,   keywords)  (see  Unpacking Argument Lists ).      "]},
{"name": ["buffer"], "description": ["The  object  argument must be an object that supports the buffer call interface  (such as strings, arrays, and buffers).  A new buffer object will be created  which references the  object  argument. The buffer object will be a slice from  the beginning of  object  (or from the specified  offset ). The slice will  extend to the end of  object  (or will have a length given by the  size   argument).   "]},
{"name": ["coerce"], "description": ["Return a tuple consisting of the two numeric arguments converted to a common  type, using the same rules as used by arithmetic operations. If coercion is not  possible, raise  TypeError.   "]},
{"name": ["intern"], "description": ["Enter  string  in the table of \"interned\" strings and return the interned string  - which is  string  itself or a copy. Interning strings is useful to gain a  little performance on dictionary lookup - if the keys in a dictionary are  interned, and the lookup key is interned, the key comparisons (after hashing)  can be done by a pointer compare instead of a string compare.  Normally, the  names used in Python programs are automatically interned, and the dictionaries  used to hold module, class or instance attributes have interned keys.       Changed in version 2.3:  Interned strings are not immortal (like they used to be in Python 2.2 and  before); you must keep a reference to the return value of  intern()  around  to benefit from it.      "]},
{"name": ["append"], "description": ["Add an item to the end of the list; equivalent to a[len(a):] = [x]. "]},
{"name": ["extend"], "description": ["Extend the list by appending all the items in the given list; equivalent to a[len(a):] = L. "]},
{"name": ["insert"], "description": ["Insert an item at a given position.  The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x). "]},
{"name": ["remove"], "description": ["Remove the first item from the list whose value is x. It is an error if there is no such item. "]},
{"name": ["pop"], "description": ["Remove the item at the given position in the list, and return it.  If no index is specified, a.pop() removes and returns the last item in the list.  (The square brackets around the i in the method signature denote that the parameter is optional, not that you should type square brackets at that position.  You will see this notation frequently in the Python Library Reference.) "]},
{"name": ["index"], "description": ["Return the index in the list of the first item whose value is x. It is an error if there is no such item. "]},
{"name": ["count"], "description": ["Return the number of times x appears in the list. "]},
{"name": ["sort"], "description": ["Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation). "]},
{"name": ["reverse"], "description": ["Reverse the elements of the list, in place. "]},
{"name": ["bit_length"], "description": ["Return the number of bits necessary to represent an integer in binary, excluding the sign and leading zeros: >>> n = -37 >>> bin(n) '-0b100101' >>> n.bit_length() 6   More precisely, if x is nonzero, then x.bit_length() is the unique positive integer k such that 2**(k-1) <= abs(x) < 2**k. Equivalently, when abs(x) is small enough to have a correctly rounded logarithm, then k = 1 + int(log(abs(x), 2)). If x is zero, then x.bit_length() returns 0. Equivalent to: def bit_length(self):     s = bin(self)       # binary representation:  bin(-37) --> '-0b100101'     s = s.lstrip('-0b') # remove leading zeros and minus sign     return len(s)       # len('100101') --> 6    New in version 2.7.  "]},
{"name": ["as_integer_ratio"], "description": ["Return a pair of integers whose ratio is exactly equal to the original float and with a positive denominator.  Raises OverflowError on infinities and a ValueError on NaNs.  New in version 2.6.  "]},
{"name": ["is_integer"], "description": ["Return True if the float instance is finite with integral value, and False otherwise: >>> (-2.0).is_integer() True >>> (3.2).is_integer() False    New in version 2.6.  "]},
{"name": ["hex"], "description": ["Return a representation of a floating-point number as a hexadecimal string.  For finite floating-point numbers, this representation will always include a leading 0x and a trailing p and exponent.  New in version 2.6.  "]},
{"name": ["fromhex"], "description": ["Class method to return the float represented by a hexadecimal string s.  The string s may have leading and trailing whitespace.  New in version 2.6.  "]},
{"name": ["__iter__"], "description": ["Return an iterator object.  The object is required to support the iterator protocol described below.  If a container supports different types of iteration, additional methods can be provided to specifically request iterators for those iteration types.  (An example of an object supporting multiple forms of iteration would be a tree structure which supports both breadth-first and depth-first traversal.)  This method corresponds to the tp_iter slot of the type structure for Python objects in the Python/C API. "]},
{"name": ["__iter__"], "description": ["Return the iterator object itself.  This is required to allow both containers and iterators to be used with the for and in statements. This method corresponds to the tp_iter slot of the type structure for Python objects in the Python/C API. "]},
{"name": ["next"], "description": ["Return the next item from the container.  If there are no further items, raise the StopIteration exception.  This method corresponds to the tp_iternext slot of the type structure for Python objects in the Python/C API. "]},
{"name": ["capitalize"], "description": ["Return a copy of the string with its first character capitalized and the rest lowercased. For 8-bit strings, this method is locale-dependent. "]},
{"name": ["center"], "description": ["Return centered in a string of length width. Padding is done using the specified fillchar (default is a space).  Changed in version 2.4: Support for the fillchar argument.  "]},
{"name": ["count"], "description": ["Return the number of non-overlapping occurrences of substring sub in the range [start, end].  Optional arguments start and end are interpreted as in slice notation. "]},
{"name": ["decode"], "description": ["Decodes the string using the codec registered for encoding. encoding defaults to the default string encoding.  errors may be given to set a different error handling scheme.  The default is 'strict', meaning that encoding errors raise UnicodeError.  Other possible values are 'ignore', 'replace' and any other name registered via codecs.register_error(), see section Codec Base Classes.  New in version 2.2.   Changed in version 2.3: Support for other error handling schemes added.   Changed in version 2.7: Support for keyword arguments added.  "]},
{"name": ["encode"], "description": ["Return an encoded version of the string.  Default encoding is the current default string encoding.  errors may be given to set a different error handling scheme.  The default for errors is 'strict', meaning that encoding errors raise a UnicodeError.  Other possible values are 'ignore', 'replace', 'xmlcharrefreplace', 'backslashreplace' and any other name registered via codecs.register_error(), see section Codec Base Classes. For a list of possible encodings, see section Standard Encodings.  New in version 2.0.   Changed in version 2.3: Support for 'xmlcharrefreplace' and 'backslashreplace' and other error handling schemes added.   Changed in version 2.7: Support for keyword arguments added.  "]},
{"name": ["endswith"], "description": ["Return True if the string ends with the specified suffix, otherwise return False.  suffix can also be a tuple of suffixes to look for.  With optional start, test beginning at that position.  With optional end, stop comparing at that position.  Changed in version 2.5: Accept tuples as suffix.  "]},
{"name": ["expandtabs"], "description": ["Return a copy of the string where all tab characters are replaced by one or more spaces, depending on the current column and the given tab size.  Tab positions occur every tabsize characters (default is 8, giving tab positions at columns 0, 8, 16 and so on).  To expand the string, the current column is set to zero and the string is examined character by character.  If the character is a tab (\\t), one or more space characters are inserted in the result until the current column is equal to the next tab position. (The tab character itself is not copied.)  If the character is a newline (\ ) or return (\\r), it is copied and the current column is reset to zero.  Any other character is copied unchanged and the current column is incremented by one regardless of how the character is represented when printed. >>> '01\\t012\\t0123\\t01234'.expandtabs() '01      012     0123    01234' >>> '01\\t012\\t0123\\t01234'.expandtabs(4) '01  012 0123    01234'   "]},
{"name": ["find"], "description": ["Return the lowest index in the string where substring sub is found, such that sub is contained in the slice s[start:end].  Optional arguments start and end are interpreted as in slice notation.  Return -1 if sub is not found.  Note The find() method should be used only if you need to know the position of sub.  To check if sub is a substring or not, use the in operator: >>> 'Py' in 'Python' True    "]},
{"name": ["format"], "description": ["Perform a string formatting operation.  The string on which this method is called can contain literal text or replacement fields delimited by braces {}.  Each replacement field contains either the numeric index of a positional argument, or the name of a keyword argument.  Returns a copy of the string where each replacement field is replaced with the string value of the corresponding argument. >>> \"The sum of 1 + 2 is {0}\".format(1+2) 'The sum of 1 + 2 is 3'   See Format String Syntax for a description of the various formatting options that can be specified in format strings. This method of string formatting is the new standard in Python 3, and should be preferred to the % formatting described in String Formatting Operations in new code.  New in version 2.6.  "]},
{"name": ["index"], "description": ["Like find(), but raise ValueError when the substring is not found. "]},
{"name": ["isalnum"], "description": ["Return true if all characters in the string are alphanumeric and there is at least one character, false otherwise. For 8-bit strings, this method is locale-dependent. "]},
{"name": ["isalpha"], "description": ["Return true if all characters in the string are alphabetic and there is at least one character, false otherwise. For 8-bit strings, this method is locale-dependent. "]},
{"name": ["isdigit"], "description": ["Return true if all characters in the string are digits and there is at least one character, false otherwise. For 8-bit strings, this method is locale-dependent. "]},
{"name": ["islower"], "description": ["Return true if all cased characters [4] in the string are lowercase and there is at least one cased character, false otherwise. For 8-bit strings, this method is locale-dependent. "]},
{"name": ["isspace"], "description": ["Return true if there are only whitespace characters in the string and there is at least one character, false otherwise. For 8-bit strings, this method is locale-dependent. "]},
{"name": ["istitle"], "description": ["Return true if the string is a titlecased string and there is at least one character, for example uppercase characters may only follow uncased characters and lowercase characters only cased ones.  Return false otherwise. For 8-bit strings, this method is locale-dependent. "]},
{"name": ["isupper"], "description": ["Return true if all cased characters [4] in the string are uppercase and there is at least one cased character, false otherwise. For 8-bit strings, this method is locale-dependent. "]},
{"name": ["join"], "description": ["Return a string which is the concatenation of the strings in the iterable iterable.  The separator between elements is the string providing this method. "]},
{"name": ["ljust"], "description": ["Return the string left justified in a string of length width. Padding is done using the specified fillchar (default is a space).  The original string is returned if width is less than or equal to len(s).  Changed in version 2.4: Support for the fillchar argument.  "]},
{"name": ["lower"], "description": ["Return a copy of the string with all the cased characters [4] converted to lowercase. For 8-bit strings, this method is locale-dependent. "]},
{"name": ["lstrip"], "description": ["Return a copy of the string with leading characters removed.  The chars argument is a string specifying the set of characters to be removed.  If omitted or None, the chars argument defaults to removing whitespace.  The chars argument is not a prefix; rather, all combinations of its values are stripped: >>> '   spacious   '.lstrip() 'spacious   ' >>> 'www.example.com'.lstrip('cmowz.') 'example.com'    Changed in version 2.2.2: Support for the chars argument.  "]},
{"name": ["partition"], "description": ["Split the string at the first occurrence of sep, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator.  If the separator is not found, return a 3-tuple containing the string itself, followed by two empty strings.  New in version 2.5.  "]},
{"name": ["replace"], "description": ["Return a copy of the string with all occurrences of substring old replaced by new.  If the optional argument count is given, only the first count occurrences are replaced. "]},
{"name": ["rfind"], "description": ["Return the highest index in the string where substring sub is found, such that sub is contained within s[start:end].  Optional arguments start and end are interpreted as in slice notation.  Return -1 on failure. "]},
{"name": ["rindex"], "description": ["Like rfind() but raises ValueError when the substring sub is not found. "]},
{"name": ["rjust"], "description": ["Return the string right justified in a string of length width. Padding is done using the specified fillchar (default is a space). The original string is returned if width is less than or equal to len(s).  Changed in version 2.4: Support for the fillchar argument.  "]},
{"name": ["rpartition"], "description": ["Split the string at the last occurrence of sep, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator.  If the separator is not found, return a 3-tuple containing two empty strings, followed by the string itself.  New in version 2.5.  "]},
{"name": ["rsplit"], "description": ["Return a list of the words in the string, using sep as the delimiter string. If maxsplit is given, at most maxsplit splits are done, the rightmost ones.  If sep is not specified or None, any whitespace string is a separator.  Except for splitting from the right, rsplit() behaves like split() which is described in detail below.  New in version 2.4.  "]},
{"name": ["rstrip"], "description": ["Return a copy of the string with trailing characters removed.  The chars argument is a string specifying the set of characters to be removed.  If omitted or None, the chars argument defaults to removing whitespace.  The chars argument is not a suffix; rather, all combinations of its values are stripped: >>> '   spacious   '.rstrip() '   spacious' >>> 'mississippi'.rstrip('ipz') 'mississ'    Changed in version 2.2.2: Support for the chars argument.  "]},
{"name": ["split"], "description": ["Return a list of the words in the string, using sep as the delimiter string.  If maxsplit is given, at most maxsplit splits are done (thus, the list will have at most maxsplit+1 elements).  If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, '1,,2'.split(',') returns ['1', '', '2']).  The sep argument may consist of multiple characters (for example, '1<>2<>3'.split('<>') returns ['1', '2', '3']). Splitting an empty string with a specified separator returns ['']. If sep is not specified or is None, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace.  Consequently, splitting an empty string or a string consisting of just whitespace with a None separator returns []. For example, ' 1  2   3  '.split() returns ['1', '2', '3'], and '  1  2   3  '.split(None, 1) returns ['1', '2   3  ']. "]},
{"name": ["splitlines"], "description": ["Return a list of the lines in the string, breaking at line boundaries. This method uses the universal newlines approach to splitting lines. Line breaks are not included in the resulting list unless keepends is given and true. For example, 'ab c\ \ de fg\\rkl\\r\ '.splitlines() returns ['ab c', '', 'de fg', 'kl'], while the same call with splitlines(True) returns ['ab c\ ', '\ ', 'de fg\\r', 'kl\\r\ ']. Unlike split() when a delimiter string sep is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line. "]},
{"name": ["startswith"], "description": ["Return True if string starts with the prefix, otherwise return False. prefix can also be a tuple of prefixes to look for.  With optional start, test string beginning at that position.  With optional end, stop comparing string at that position.  Changed in version 2.5: Accept tuples as prefix.  "]},
{"name": ["strip"], "description": ["Return a copy of the string with the leading and trailing characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or None, the chars argument defaults to removing whitespace. The chars argument is not a prefix or suffix; rather, all combinations of its values are stripped: >>> '   spacious   '.strip() 'spacious' >>> 'www.example.com'.strip('cmowz.') 'example'    Changed in version 2.2.2: Support for the chars argument.  "]},
{"name": ["swapcase"], "description": ["Return a copy of the string with uppercase characters converted to lowercase and vice versa. For 8-bit strings, this method is locale-dependent. "]},
{"name": ["title"], "description": ["Return a titlecased version of the string where words start with an uppercase character and the remaining characters are lowercase. The algorithm uses a simple language-independent definition of a word as groups of consecutive letters.  The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result: >>> \"they're bill's friends from the UK\".title() \"They'Re Bill'S Friends From The Uk\"   A workaround for apostrophes can be constructed using regular expressions: >>> import re >>> def titlecase(s):...     return re.sub(r\"[A-Za-z]+('[A-Za-z]+)?\",...                   lambda mo: mo.group(0)[0].upper() +...                              mo.group(0)[1:].lower(),...                   s)... >>> titlecase(\"they're bill's friends.\") \"They're Bill's Friends.\"   For 8-bit strings, this method is locale-dependent. "]},
{"name": ["translate"], "description": ["Return a copy of the string where all characters occurring in the optional argument deletechars are removed, and the remaining characters have been mapped through the given translation table, which must be a string of length 256. You can use the maketrans() helper function in the string module to create a translation table. For string objects, set the table argument to None for translations that only delete characters: >>> 'read this short text'.translate(None, 'aeiou') 'rd ths shrt txt'    New in version 2.6: Support for a None table argument.  For Unicode objects, the translate() method does not accept the optional deletechars argument.  Instead, it returns a copy of the s where all characters have been mapped through the given translation table which must be a mapping of Unicode ordinals to Unicode ordinals, Unicode strings or None. Unmapped characters are left untouched. Characters mapped to None are deleted.  Note, a more flexible approach is to create a custom character mapping codec using the codecs module (see encodings.cp1251 for an example). "]},
{"name": ["upper"], "description": ["Return a copy of the string with all the cased characters [4] converted to uppercase.  Note that str.upper().isupper() might be False if s contains uncased characters or if the Unicode category of the resulting character(s) is not \"Lu\" (Letter, uppercase), but e.g. \"Lt\" (Letter, titlecase). For 8-bit strings, this method is locale-dependent. "]},
{"name": ["zfill"], "description": ["Return the numeric string left filled with zeros in a string of length width.  A sign prefix is handled correctly.  The original string is returned if width is less than or equal to len(s).  New in version 2.2.2.  "]},
{"name": ["isnumeric"], "description": ["Return True if there are only numeric characters in S, False otherwise. Numeric characters include digit characters, and all characters that have the Unicode numeric value property, e.g. U+2155, VULGAR FRACTION ONE FIFTH. "]},
{"name": ["isdecimal"], "description": ["Return True if there are only decimal characters in S, False otherwise. Decimal characters include digit characters, and all characters that can be used to form decimal-radix numbers, e.g. U+0660, ARABIC-INDIC DIGIT ZERO. "]},
{"name": ["argv"], "description": ["The list of command line arguments passed to a Python script. argv[0] is the script name (it is operating system dependent whether this is a full pathname or not).  If the command was executed using the -c command line option to the interpreter, argv[0] is set to the string '-c'.  If no script name was passed to the Python interpreter, argv[0] is the empty string. To loop over the standard input, or the list of files given on the command line, see the fileinput module. "]},
{"name": ["byteorder"], "description": ["An indicator of the native byte order.  This will have the value 'big' on big-endian (most-significant byte first) platforms, and 'little' on little-endian (least-significant byte first) platforms.  New in version 2.0.  "]},
{"name": ["builtin_module_names"], "description": ["A tuple of strings giving the names of all modules that are compiled into this Python interpreter.  (This information is not available in any other way - modules.keys() only lists the imported modules.) "]},
{"name": ["call_tracing"], "description": ["Call func(*args), while tracing is enabled.  The tracing state is saved, and restored afterwards.  This is intended to be called from a debugger from a checkpoint, to recursively debug some other code. "]},
{"name": ["copyright"], "description": ["A string containing the copyright pertaining to the Python interpreter. "]},
{"name": ["_clear_type_cache"], "description": ["Clear the internal type cache. The type cache is used to speed up attribute and method lookups. Use the function only to drop unnecessary references during reference leak debugging. This function should be used for internal and specialized purposes only.  New in version 2.6.  "]},
{"name": ["_current_frames"], "description": ["Return a dictionary mapping each thread's identifier to the topmost stack frame currently active in that thread at the time the function is called. Note that functions in the traceback module can build the call stack given such a frame. This is most useful for debugging deadlock:  this function does not require the deadlocked threads' cooperation, and such threads' call stacks are frozen for as long as they remain deadlocked.  The frame returned for a non-deadlocked thread may bear no relationship to that thread's current activity by the time calling code examines the frame. This function should be used for internal and specialized purposes only.  New in version 2.5.  "]},
{"name": ["dllhandle"], "description": ["Integer specifying the handle of the Python DLL. Availability: Windows. "]},
{"name": ["displayhook"], "description": ["If value is not None, this function prints it to sys.stdout, and saves it in __builtin__._. sys.displayhook is called on the result of evaluating an expression entered in an interactive Python session.  The display of these values can be customized by assigning another one-argument function to sys.displayhook. "]},
{"name": ["dont_write_bytecode"], "description": ["If this is true, Python won't try to write .pyc or .pyo files on the import of source modules.  This value is initially set to True or False depending on the -B command line option and the PYTHONDONTWRITEBYTECODE environment variable, but you can set it yourself to control bytecode file generation.  New in version 2.6.  "]},
{"name": ["excepthook"], "description": ["This function prints out a given traceback and exception to sys.stderr. When an exception is raised and uncaught, the interpreter calls sys.excepthook with three arguments, the exception class, exception instance, and a traceback object.  In an interactive session this happens just before control is returned to the prompt; in a Python program this happens just before the program exits.  The handling of such top-level exceptions can be customized by assigning another three-argument function to sys.excepthook. "]},
{"name": ["__displayhook____excepthook__"], "description": ["These objects contain the original values of displayhook and excepthook at the start of the program.  They are saved so that displayhook and excepthook can be restored in case they happen to get replaced with broken objects. "]},
{"name": ["exc_info"], "description": ["This function returns a tuple of three values that give information about the exception that is currently being handled.  The information returned is specific both to the current thread and to the current stack frame.  If the current stack frame is not handling an exception, the information is taken from the calling stack frame, or its caller, and so on until a stack frame is found that is handling an exception.  Here, \"handling an exception\" is defined as \"executing or having executed an except clause.\"  For any stack frame, only information about the most recently handled exception is accessible. If no exception is being handled anywhere on the stack, a tuple containing three None values is returned.  Otherwise, the values returned are (type, value, traceback).  Their meaning is: type gets the exception type of the exception being handled (a class object); value gets the exception parameter (its associated value or the second argument to raise, which is always a class instance if the exception type is a class object); traceback gets a traceback object (see the Reference Manual) which encapsulates the call stack at the point where the exception originally occurred. If exc_clear() is called, this function will return three None values until either another exception is raised in the current thread or the execution stack returns to a frame where another exception is being handled.  Warning Assigning the traceback return value to a local variable in a function that is handling an exception will cause a circular reference.  This will prevent anything referenced by a local variable in the same function or by the traceback from being garbage collected.  Since most functions don't need access to the traceback, the best solution is to use something like exctype, value = sys.exc_info()[:2] to extract only the exception type and value.  If you do need the traceback, make sure to delete it after use (best done with a try ... finally statement) or to call exc_info() in a function that does not itself handle an exception.   Note Beginning with Python 2.2, such cycles are automatically reclaimed when garbage collection is enabled and they become unreachable, but it remains more efficient to avoid creating cycles.  "]},
{"name": ["exc_clear"], "description": ["This function clears all information relating to the current or last exception that occurred in the current thread.  After calling this function, exc_info() will return three None values until another exception is raised in the current thread or the execution stack returns to a frame where another exception is being handled. This function is only needed in only a few obscure situations.  These include logging and error handling systems that report information on the last or current exception.  This function can also be used to try to free resources and trigger object finalization, though no guarantee is made as to what objects will be freed, if any.  New in version 2.3.  "]},
{"name": ["exc_typeexc_valueexc_traceback"], "description": [" Deprecated since version 1.5: Use exc_info() instead.  Since they are global variables, they are not specific to the current thread, so their use is not safe in a multi-threaded program.  When no exception is being handled, exc_type is set to None and the other two are undefined. "]},
{"name": ["exec_prefix"], "description": ["A string giving the site-specific directory prefix where the platform-dependent Python files are installed; by default, this is also '/usr/local'.  This can be set at build time with the --exec-prefix argument to the configure script.  Specifically, all configuration files (e.g. the pyconfig.h header file) are installed in the directory exec_prefix/lib/pythonX.Y/config, and shared library modules are installed in exec_prefix/lib/pythonX.Y/lib-dynload, where X.Y is the version number of Python, for example 2.7. "]},
{"name": ["executable"], "description": ["A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense. If Python is unable to retrieve the real path to its executable, sys.executable will be an empty string or None. "]},
{"name": ["exit"], "description": ["Exit from Python.  This is implemented by raising the SystemExit exception, so cleanup actions specified by finally clauses of try statements are honored, and it is possible to intercept the exit attempt at an outer level. The optional argument arg can be an integer giving the exit status (defaulting to zero), or another type of object.  If it is an integer, zero is considered \"successful termination\" and any nonzero value is considered \"abnormal termination\" by shells and the like.  Most systems require it to be in the range 0-127, and produce undefined results otherwise.  Some systems have a convention for assigning specific meanings to specific exit codes, but these are generally underdeveloped; Unix programs generally use 2 for command line syntax errors and 1 for all other kind of errors.  If another type of object is passed, None is equivalent to passing zero, and any other object is printed to stderr and results in an exit code of 1.  In particular, sys.exit(\"some error message\") is a quick way to exit a program when an error occurs. Since exit() ultimately \"only\" raises an exception, it will only exit the process when called from the main thread, and the exception is not intercepted. "]},
{"name": ["exitfunc"], "description": ["This value is not actually defined by the module, but can be set by the user (or by a program) to specify a clean-up action at program exit.  When set, it should be a parameterless function.  This function will be called when the interpreter exits.  Only one function may be installed in this way; to allow multiple functions which will be called at termination, use the atexit module.  Note The exit function is not called when the program is killed by a signal, when a Python fatal internal error is detected, or when os._exit() is called.   Deprecated since version 2.4: Use atexit instead.  "]},
{"name": ["flags"], "description": ["The struct sequence flags exposes the status of command line flags. The attributes are read only. attribute flag debug -d py3k_warning -3 division_warning -Q division_new -Qnew inspect -i interactive -i optimize -O or -OO dont_write_bytecode -B no_user_site -s no_site -S ignore_environment -E tabcheck -t or -tt verbose -v unicode -U bytes_warning -b hash_randomization -R  New in version 2.6.   New in version 2.7.3: The hash_randomization attribute.  "]},
{"name": ["float_info"], "description": ["A structseq holding information about the float type. It contains low level information about the precision and internal representation.  The values correspond to the various floating-point constants defined in the standard header file float.h for the \'C' programming language; see section 5.2.4.2.2 of the 1999 ISO/IEC C standard [C99], \'Characteristics of floating types', for details. attribute float.h macro explanation epsilon DBL_EPSILON difference between 1 and the least value greater than 1 that is representable as a float dig DBL_DIG maximum number of decimal digits that can be faithfully represented in a float;  see below mant_dig DBL_MANT_DIG float precision: the number of base-radix digits in the significand of a float max DBL_MAX maximum representable finite float max_exp DBL_MAX_EXP maximum integer e such that radix**(e-1) is a representable finite float max_10_exp DBL_MAX_10_EXP maximum integer e such that 10**e is in the range of representable finite floats min DBL_MIN minimum positive normalized float min_exp DBL_MIN_EXP minimum integer e such that radix**(e-1) is a normalized float min_10_exp DBL_MIN_10_EXP minimum integer e such that 10**e is a normalized float radix FLT_RADIX radix of exponent representation rounds FLT_ROUNDS integer constant representing the rounding mode used for arithmetic operations.  This reflects the value of the system FLT_ROUNDS macro at interpreter startup time.  See section 5.2.4.2.2 of the C99 standard for an explanation of the possible values and their meanings. The attribute sys.float_info.dig needs further explanation.  If s is any string representing a decimal number with at most sys.float_info.dig significant digits, then converting s to a float and back again will recover a string representing the same decimal value: >>> import sys >>> sys.float_info.dig 15 >>> s = '3.14159265358979'    # decimal string with 15 significant digits >>> format(float(s), '.15g')  # convert to float and back -> same value '3.14159265358979'   But for strings with more than sys.float_info.dig significant digits, this isn't always true: >>> s = '9876543211234567'    # 16 significant digits is too many! >>> format(float(s), '.16g')  # conversion changes value '9876543211234568'    New in version 2.6.  "]},
{"name": ["float_repr_style"], "description": ["A string indicating how the repr() function behaves for floats.  If the string has value 'short' then for a finite float x, repr(x) aims to produce a short string with the property that float(repr(x)) == x.  This is the usual behaviour in Python 2.7 and later.  Otherwise, float_repr_style has value 'legacy' and repr(x) behaves in the same way as it did in versions of Python prior to 2.7.  New in version 2.7.  "]},
{"name": ["getcheckinterval"], "description": ["Return the interpreter's \"check interval\"; see setcheckinterval().  New in version 2.3.  "]},
{"name": ["getdefaultencoding"], "description": ["Return the name of the current default string encoding used by the Unicode implementation.  New in version 2.0.  "]},
{"name": ["getdlopenflags"], "description": ["Return the current value of the flags that are used for dlopen() calls. The flag constants are defined in the dl and DLFCN modules. Availability: Unix.  New in version 2.2.  "]},
{"name": ["getfilesystemencoding"], "description": ["Return the name of the encoding used to convert Unicode filenames into system file names, or None if the system default encoding is used. The result value depends on the operating system: On Mac OS X, the encoding is 'utf-8'. On Unix, the encoding is the user's preference according to the result of nl_langinfo(CODESET), or None if the nl_langinfo(CODESET) failed. On Windows NT+, file names are Unicode natively, so no conversion is performed. getfilesystemencoding() still returns 'mbcs', as this is the encoding that applications should use when they explicitly want to convert Unicode strings to byte strings that are equivalent when used as file names. On Windows 9x, the encoding is 'mbcs'.  New in version 2.3.  "]},
{"name": ["getrefcount"], "description": ["Return the reference count of the object.  The count returned is generally one higher than you might expect, because it includes the (temporary) reference as an argument to getrefcount(). "]},
{"name": ["getrecursionlimit"], "description": ["Return the current value of the recursion limit, the maximum depth of the Python interpreter stack.  This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python.  It can be set by setrecursionlimit(). "]},
{"name": ["getsizeof"], "description": ["Return the size of an object in bytes. The object can be any type of object. All built-in objects will return correct results, but this does not have to hold true for third-party extensions as it is implementation specific. If given, default will be returned if the object does not provide means to retrieve the size.  Otherwise a TypeError will be raised. getsizeof() calls the object's __sizeof__ method and adds an additional garbage collector overhead if the object is managed by the garbage collector.  New in version 2.6.  "]},
{"name": ["_getframe"], "description": ["Return a frame object from the call stack.  If optional integer depth is given, return the frame object that many calls below the top of the stack.  If that is deeper than the call stack, ValueError is raised.  The default for depth is zero, returning the frame at the top of the call stack.  CPython implementation detail: This function should be used for internal and specialized purposes only. It is not guaranteed to exist in all implementations of Python.  "]},
{"name": ["getprofile"], "description": ["Get the profiler function as set by setprofile().  New in version 2.6.  "]},
{"name": ["gettrace"], "description": ["Get the trace function as set by settrace().  CPython implementation detail: The gettrace() function is intended only for implementing debuggers, profilers, coverage tools and the like.  Its behavior is part of the implementation platform, rather than part of the language definition, and thus may not be available in all Python implementations.   New in version 2.6.  "]},
{"name": ["getwindowsversion"], "description": ["Return a named tuple describing the Windows version currently running.  The named elements are major, minor, build, platform, service_pack, service_pack_minor, service_pack_major, suite_mask, and product_type. service_pack contains a string while all other values are integers. The components can also be accessed by name, so sys.getwindowsversion()[0] is equivalent to sys.getwindowsversion().major. For compatibility with prior versions, only the first 5 elements are retrievable by indexing. platform may be one of the following values: Constant Platform 0 (VER_PLATFORM_WIN32s) Win32s on Windows 3.1 1 (VER_PLATFORM_WIN32_WINDOWS) Windows 95/98/ME 2 (VER_PLATFORM_WIN32_NT) Windows NT/2000/XP/x64 3 (VER_PLATFORM_WIN32_CE) Windows CE product_type may be one of the following values: Constant Meaning 1 (VER_NT_WORKSTATION) The system is a workstation. 2 (VER_NT_DOMAIN_CONTROLLER) The system is a domain controller. 3 (VER_NT_SERVER) The system is a server, but not a domain controller. This function wraps the Win32 GetVersionEx() function; see the Microsoft documentation on OSVERSIONINFOEX() for more information about these fields. Availability: Windows.  New in version 2.3.   Changed in version 2.7: Changed to a named tuple and added service_pack_minor, service_pack_major, suite_mask, and product_type.  "]},
{"name": ["hexversion"], "description": ["The version number encoded as a single integer.  This is guaranteed to increase with each version, including proper support for non-production releases.  For example, to test that the Python interpreter is at least version 1.5.2, use: if sys.hexversion >= 0x010502F0:     # use some advanced feature     ... else:     # use an alternative implementation or warn the user     ...   This is called hexversion since it only really looks meaningful when viewed as the result of passing it to the built-in hex() function.  The version_info value may be used for a more human-friendly encoding of the same information. The hexversion is a 32-bit number with the following layout: Bits (big endian order) Meaning 1-8 PY_MAJOR_VERSION  (the 2 in 2.1.0a3) 9-16 PY_MINOR_VERSION  (the 1 in 2.1.0a3) 17-24 PY_MICRO_VERSION  (the 0 in 2.1.0a3) 25-28 PY_RELEASE_LEVEL  (0xA for alpha, 0xB for beta, 0xC for release candidate and 0xF for final) 29-32 PY_RELEASE_SERIAL  (the 3 in 2.1.0a3, zero for final releases) Thus 2.1.0a3 is hexversion 0x020100a3.  New in version 1.5.2.  "]},
{"name": ["long_info"], "description": ["A struct sequence that holds information about Python's internal representation of integers.  The attributes are read only. Attribute Explanation bits_per_digit number of bits held in each digit.  Python integers are stored internally in base 2**long_info.bits_per_digit sizeof_digit size in bytes of the C type used to represent a digit  New in version 2.7.  "]},
{"name": ["last_typelast_valuelast_traceback"], "description": ["These three variables are not always defined; they are set when an exception is not handled and the interpreter prints an error message and a stack traceback. Their intended use is to allow an interactive user to import a debugger module and engage in post-mortem debugging without having to re-execute the command that caused the error.  (Typical use is import pdb; pdb.pm() to enter the post-mortem debugger; see chapter pdb - The Python Debugger for more information.) The meaning of the variables is the same as that of the return values from exc_info() above.  (Since there is only one interactive thread, thread-safety is not a concern for these variables, unlike for exc_type etc.) "]},
{"name": ["maxint"], "description": ["The largest positive integer supported by Python's regular integer type.  This is at least 2**31-1.  The largest negative integer is -maxint-1 - the asymmetry results from the use of 2's complement binary arithmetic. "]},
{"name": ["maxsize"], "description": ["The largest positive integer supported by the platform's Py_ssize_t type, and thus the maximum size lists, strings, dicts, and many other containers can have. "]},
{"name": ["maxunicode"], "description": ["An integer giving the largest supported code point for a Unicode character.  The value of this depends on the configuration option that specifies whether Unicode characters are stored as UCS-2 or UCS-4. "]},
{"name": ["meta_path"], "description": ["A list of finder objects that have their find_module() methods called to see if one of the objects can find the module to be imported. The find_module() method is called at least with the absolute name of the module being imported. If the module to be imported is contained in package then the parent package's __path__ attribute is passed in as a second argument. The method returns None if the module cannot be found, else returns a loader. sys.meta_path is searched before any implicit default finders or sys.path. See PEP 302 for the original specification. "]},
{"name": ["modules"], "description": ["This is a dictionary that maps module names to modules which have already been loaded.  This can be manipulated to force reloading of modules and other tricks. Note that removing a module from this dictionary is not the same as calling reload() on the corresponding module object. "]},
{"name": ["path"], "description": ["A list of strings that specifies the search path for modules. Initialized from the environment variable PYTHONPATH, plus an installation-dependent default. As initialized upon program startup, the first item of this list, path[0], is the directory containing the script that was used to invoke the Python interpreter.  If the script directory is not available (e.g.  if the interpreter is invoked interactively or if the script is read from standard input), path[0] is the empty string, which directs Python to search modules in the current directory first.  Notice that the script directory is inserted before the entries inserted as a result of PYTHONPATH. A program is free to modify this list for its own purposes.  Changed in version 2.3: Unicode strings are no longer ignored.   See also Module site This describes how to use .pth files to extend sys.path.  "]},
{"name": ["path_hooks"], "description": ["A list of callables that take a path argument to try to create a finder for the path. If a finder can be created, it is to be returned by the callable, else raise ImportError. Originally specified in PEP 302. "]},
{"name": ["path_importer_cache"], "description": ["A dictionary acting as a cache for finder objects. The keys are paths that have been passed to sys.path_hooks and the values are the finders that are found. If a path is a valid file system path but no explicit finder is found on sys.path_hooks then None is stored to represent the implicit default finder should be used. If the path is not an existing path then imp.NullImporter is set. Originally specified in PEP 302. "]},
{"name": ["platform"], "description": ["This string contains a platform identifier that can be used to append platform-specific components to sys.path, for instance. For most Unix systems, this is the lowercased OS name as returned by uname -s with the first part of the version as returned by uname -r appended, e.g. 'sunos5', at the time when Python was built.  Unless you want to test for a specific system version, it is therefore recommended to use the following idiom: if sys.platform.startswith('freebsd'):     # FreeBSD-specific code here... elif sys.platform.startswith('linux'):     # Linux-specific code here...    Changed in version 2.7.3: Since lots of code check for sys.platform == 'linux2', and there is no essential change between Linux 2.x and 3.x, sys.platform is always set to 'linux2', even on Linux 3.x.  In Python 3.3 and later, the value will always be set to 'linux', so it is recommended to always use the startswith idiom presented above.  For other systems, the values are: System platform value Linux (2.x and 3.x) 'linux2' Windows 'win32' Windows/Cygwin 'cygwin' Mac OS X 'darwin' OS/2 'os2' OS/2 EMX 'os2emx' RiscOS 'riscos' AtheOS 'atheos'  See also os.name has a coarser granularity.  os.uname() gives system-dependent version information. The platform module provides detailed checks for the system's identity.  "]},
{"name": ["prefix"], "description": ["A string giving the site-specific directory prefix where the platform independent Python files are installed; by default, this is the string '/usr/local'.  This can be set at build time with the --prefix argument to the configure script.  The main collection of Python library modules is installed in the directory prefix/lib/pythonX.Y while the platform independent header files (all except pyconfig.h) are stored in prefix/include/pythonX.Y, where X.Y is the version number of Python, for example 2.7. "]},
{"name": ["ps1ps2"], "description": ["Strings specifying the primary and secondary prompt of the interpreter.  These are only defined if the interpreter is in interactive mode.  Their initial values in this case are '>>> ' and '... '.  If a non-string object is assigned to either variable, its str() is re-evaluated each time the interpreter prepares to read a new interactive command; this can be used to implement a dynamic prompt. "]},
{"name": ["py3kwarning"], "description": ["Bool containing the status of the Python 3 warning flag. It's True when Python is started with the -3 option.  (This should be considered read-only; setting it to a different value doesn't have an effect on Python 3 warnings.)  New in version 2.6.  "]},
{"name": ["setcheckinterval"], "description": ["Set the interpreter's \"check interval\".  This integer value determines how often the interpreter checks for periodic things such as thread switches and signal handlers.  The default is 100, meaning the check is performed every 100 Python virtual instructions. Setting it to a larger value may increase performance for programs using threads.  Setting it to a value <= 0 checks every virtual instruction, maximizing responsiveness as well as overhead. "]},
{"name": ["setdefaultencoding"], "description": ["Set the current default string encoding used by the Unicode implementation.  If name does not match any available encoding, LookupError is raised. This function is only intended to be used by the site module implementation and, where needed, by sitecustomize.  Once used by the site module, it is removed from the sys module's namespace.  New in version 2.0.  "]},
{"name": ["setdlopenflags"], "description": ["Set the flags used by the interpreter for dlopen() calls, such as when the interpreter loads extension modules.  Among other things, this will enable a lazy resolving of symbols when importing a module, if called as sys.setdlopenflags(0).  To share symbols across extension modules, call as sys.setdlopenflags(dl.RTLD_NOW | dl.RTLD_GLOBAL).  Symbolic names for the flag modules can be either found in the dl module, or in the DLFCN module. If DLFCN is not available, it can be generated from /usr/include/dlfcn.h using the h2py script. Availability: Unix.  New in version 2.2.  "]},
{"name": ["setprofile"], "description": ["Set the system's profile function, which allows you to implement a Python source code profiler in Python.  See chapter The Python Profilers for more information on the Python profiler.  The system's profile function is called similarly to the system's trace function (see settrace()), but it isn't called for each executed line of code (only on call and return, but the return event is reported even when an exception has been set).  The function is thread-specific, but there is no way for the profiler to know about context switches between threads, so it does not make sense to use this in the presence of multiple threads. Also, its return value is not used, so it can simply return None. "]},
{"name": ["setrecursionlimit"], "description": ["Set the maximum depth of the Python interpreter stack to limit.  This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python. The highest possible limit is platform-dependent.  A user may need to set the limit higher when she has a program that requires deep recursion and a platform that supports a higher limit.  This should be done with care, because a too-high limit can lead to a crash. "]},
{"name": ["settrace"], "description": ["Set the system's trace function, which allows you to implement a Python source code debugger in Python.  The function is thread-specific; for a debugger to support multiple threads, it must be registered using settrace() for each thread being debugged. Trace functions should have three arguments: frame, event, and arg. frame is the current stack frame.  event is a string: 'call', 'line', 'return', 'exception', 'c_call', 'c_return', or 'c_exception'. arg depends on the event type. The trace function is invoked (with event set to 'call') whenever a new local scope is entered; it should return a reference to a local trace function to be used that scope, or None if the scope shouldn't be traced. The local trace function should return a reference to itself (or to another function for further tracing in that scope), or None to turn off tracing in that scope. The events have the following meaning: 'call' A function is called (or some other code block entered).  The global trace function is called; arg is None; the return value specifies the local trace function. 'line' The interpreter is about to execute a new line of code or re-execute the condition of a loop.  The local trace function is called; arg is None; the return value specifies the new local trace function.  See Objects/lnotab_notes.txt for a detailed explanation of how this works. 'return' A function (or other code block) is about to return.  The local trace function is called; arg is the value that will be returned, or None if the event is caused by an exception being raised.  The trace function's return value is ignored. 'exception' An exception has occurred.  The local trace function is called; arg is a tuple (exception, value, traceback); the return value specifies the new local trace function. 'c_call' A C function is about to be called.  This may be an extension function or a built-in.  arg is the C function object. 'c_return' A C function has returned. arg is the C function object. 'c_exception' A C function has raised an exception.  arg is the C function object. Note that as an exception is propagated down the chain of callers, an 'exception' event is generated at each level. For more information on code and frame objects, refer to The standard type hierarchy.  CPython implementation detail: The settrace() function is intended only for implementing debuggers, profilers, coverage tools and the like.  Its behavior is part of the implementation platform, rather than part of the language definition, and thus may not be available in all Python implementations.  "]},
{"name": [], "description": ["A function is called (or some other code block entered).  The global trace function is called; arg is None; the return value specifies the local trace function.The interpreter is about to execute a new line of code or re-execute the condition of a loop.  The local trace function is called; arg is None; the return value specifies the new local trace function.  See Objects/lnotab_notes.txt for a detailed explanation of how this works.A function (or other code block) is about to return.  The local trace function is called; arg is the value that will be returned, or None if the event is caused by an exception being raised.  The trace function's return value is ignored.An exception has occurred.  The local trace function is called; arg is a tuple (exception, value, traceback); the return value specifies the new local trace function.A C function is about to be called.  This may be an extension function or a built-in.  arg is the C function object.A C function has returned. arg is the C function object.A C function has raised an exception.  arg is the C function object."]},
{"name": ["settscdump"], "description": ["Activate dumping of VM measurements using the Pentium timestamp counter, if on_flag is true. Deactivate these dumps if on_flag is off. The function is available only if Python was compiled with --with-tsc. To understand the output of this dump, read Python/ceval.c in the Python sources.  New in version 2.4.   CPython implementation detail: This function is intimately bound to CPython implementation details and thus not likely to be implemented elsewhere.  "]},
{"name": ["stdinstdoutstderr"], "description": ["File objects corresponding to the interpreter's standard input, output and error streams.  stdin is used for all interpreter input except for scripts but including calls to input() and raw_input().  stdout is used for the output of print and expression statements and for the prompts of input() and raw_input(). The interpreter's own prompts and (almost all of) its error messages go to stderr.  stdout and stderr needn't be built-in file objects: any object is acceptable as long as it has a write() method that takes a string argument.  (Changing these objects doesn't affect the standard I/O streams of processes executed by os.popen(), os.system() or the exec*() family of functions in the os module.) "]},
{"name": ["__stdin____stdout____stderr__"], "description": ["These objects contain the original values of stdin, stderr and stdout at the start of the program.  They are used during finalization, and could be useful to print to the actual standard stream no matter if the sys.std* object has been redirected. It can also be used to restore the actual files to known working file objects in case they have been overwritten with a broken object.  However, the preferred way to do this is to explicitly save the previous stream before replacing it, and restore the saved object. "]},
{"name": ["subversion"], "description": ["A triple (repo, branch, version) representing the Subversion information of the Python interpreter. repo is the name of the repository, 'CPython'. branch is a string of one of the forms 'trunk', 'branches/name' or 'tags/name'. version is the output of svnversion, if the interpreter was built from a Subversion checkout; it contains the revision number (range) and possibly a trailing 'M' if there were local modifications. If the tree was exported (or svnversion was not available), it is the revision of Include/patchlevel.h if the branch is a tag. Otherwise, it is None.  New in version 2.5.   Note Python is now developed using Mercurial.  In recent Python 2.7 bugfix releases, subversion therefore contains placeholder information.  It is removed in Python 3.3.  "]},
{"name": ["tracebacklimit"], "description": ["When this variable is set to an integer value, it determines the maximum number of levels of traceback information printed when an unhandled exception occurs. The default is 1000.  When set to 0 or less, all traceback information is suppressed and only the exception type and value are printed. "]},
{"name": ["version"], "description": ["A string containing the version number of the Python interpreter plus additional information on the build number and compiler used.  This string is displayed when the interactive interpreter is started.  Do not extract version information out of it, rather, use version_info and the functions provided by the platform module. "]},
{"name": ["api_version"], "description": ["The C API version for this interpreter.  Programmers may find this useful when debugging version conflicts between Python and extension modules.  New in version 2.3.  "]},
{"name": ["version_info"], "description": ["A tuple containing the five components of the version number: major, minor, micro, releaselevel, and serial.  All values except releaselevel are integers; the release level is 'alpha', 'beta', 'candidate', or 'final'.  The version_info value corresponding to the Python version 2.0 is (2, 0, 0, 'final', 0).  The components can also be accessed by name, so sys.version_info[0] is equivalent to sys.version_info.major and so on.  New in version 2.0.   Changed in version 2.7: Added named component attributes  "]},
{"name": ["warnoptions"], "description": ["This is an implementation detail of the warnings framework; do not modify this value.  Refer to the warnings module for more information on the warnings framework. "]},
{"name": ["winver"], "description": ["The version number used to form registry keys on Windows platforms. This is stored as string resource 1000 in the Python DLL.  The value is normally the first three characters of version.  It is provided in the sys module for informational purposes; modifying this value has no effect on the registry keys used by Python. Availability: Windows. "]},
{"name": ["error"], "description": ["An alias for the built-in OSError exception. "]},
{"name": ["name"], "description": ["The name of the operating system dependent module imported.  The following names have currently been registered: 'posix', 'nt', 'os2', 'ce', 'java', 'riscos'.  See also sys.platform has a finer granularity.  os.uname() gives system-dependent version information. The platform module provides detailed checks for the system's identity.  "]},
{"name": ["environ"], "description": ["A mapping object representing the string environment. For example, environ['HOME'] is the pathname of your home directory (on some platforms), and is equivalent to getenv(\"HOME\") in C. This mapping is captured the first time the os module is imported, typically during Python startup as part of processing site.py.  Changes to the environment made after this time are not reflected in os.environ, except for changes made by modifying os.environ directly. If the platform supports the putenv() function, this mapping may be used to modify the environment as well as query the environment.  putenv() will be called automatically when the mapping is modified.  Note Calling putenv() directly does not change os.environ, so it's better to modify os.environ.   Note On some platforms, including FreeBSD and Mac OS X, setting environ may cause memory leaks.  Refer to the system documentation for putenv().  If putenv() is not provided, a modified copy of this mapping  may be passed to the appropriate process-creation functions to cause  child processes to use a modified environment. If the platform supports the unsetenv() function, you can delete items in this mapping to unset environment variables. unsetenv() will be called automatically when an item is deleted from os.environ, and when one of the pop() or clear() methods is called.  Changed in version 2.6: Also unset environment variables when calling os.environ.clear() and os.environ.pop().  "]},
{"name": ["chdirfchdirgetcwd"], "description": ["These functions are described in Files and Directories. "]},
{"name": ["ctermid"], "description": ["Return the filename corresponding to the controlling terminal of the process. Availability: Unix. "]},
{"name": ["getegid"], "description": ["Return the effective group id of the current process.  This corresponds to the \"set id\" bit on the file being executed in the current process. Availability: Unix. "]},
{"name": ["geteuid"], "description": ["Return the current process's effective user id. Availability: Unix. "]},
{"name": ["getgid"], "description": ["Return the real group id of the current process. Availability: Unix. "]},
{"name": ["getgroups"], "description": ["Return list of supplemental group ids associated with the current process. Availability: Unix.  Note On Mac OS X, getgroups() behavior differs somewhat from other Unix platforms. If the Python interpreter was built with a deployment target of 10.5 or earlier, getgroups() returns the list of effective group ids associated with the current user process; this list is limited to a system-defined number of entries, typically 16, and may be modified by calls to setgroups() if suitably privileged. If built with a deployment target greater than 10.5, getgroups() returns the current group access list for the user associated with the effective user id of the process; the group access list may change over the lifetime of the process, it is not affected by calls to setgroups(), and its length is not limited to 16.  The deployment target value, MACOSX_DEPLOYMENT_TARGET, can be obtained with sysconfig.get_config_var().  "]},
{"name": ["initgroups"], "description": ["Call the system initgroups() to initialize the group access list with all of the groups of which the specified username is a member, plus the specified group id. Availability: Unix.  New in version 2.7.  "]},
{"name": ["getlogin"], "description": ["Return the name of the user logged in on the controlling terminal of the process.  For most purposes, it is more useful to use the environment variable LOGNAME to find out who the user is, or pwd.getpwuid(os.getuid())[0] to get the login name of the process's real user id. Availability: Unix. "]},
{"name": ["getpgid"], "description": ["Return the process group id of the process with process id pid. If pid is 0, the process group id of the current process is returned. Availability: Unix.  New in version 2.3.  "]},
{"name": ["getpgrp"], "description": ["Return the id of the current process group. Availability: Unix. "]},
{"name": ["getpid"], "description": ["Return the current process id. Availability: Unix, Windows. "]},
{"name": ["getppid"], "description": ["Return the parent's process id. Availability: Unix. "]},
{"name": ["getresuid"], "description": ["Return a tuple (ruid, euid, suid) denoting the current process's real, effective, and saved user ids. Availability: Unix.  New in version 2.7.  "]},
{"name": ["getresgid"], "description": ["Return a tuple (rgid, egid, sgid) denoting the current process's real, effective, and saved group ids. Availability: Unix.  New in version 2.7.  "]},
{"name": ["getuid"], "description": ["Return the current process's real user id. Availability: Unix. "]},
{"name": ["getenv"], "description": ["Return the value of the environment variable varname if it exists, or value if it doesn't.  value defaults to None. Availability: most flavors of Unix, Windows. "]},
{"name": ["putenv"], "description": ["Set the environment variable named varname to the string value.  Such changes to the environment affect subprocesses started with os.system(), popen() or fork() and execv(). Availability: most flavors of Unix, Windows.  Note On some platforms, including FreeBSD and Mac OS X, setting environ may cause memory leaks. Refer to the system documentation for putenv.  When putenv() is supported, assignments to items in os.environ are automatically translated into corresponding calls to putenv(); however, calls to putenv() don't update os.environ, so it is actually preferable to assign to items of os.environ. "]},
{"name": ["setegid"], "description": ["Set the current process's effective group id. Availability: Unix. "]},
{"name": ["seteuid"], "description": ["Set the current process's effective user id. Availability: Unix. "]},
{"name": ["setgid"], "description": ["Set the current process' group id. Availability: Unix. "]},
{"name": ["setgroups"], "description": ["Set the list of supplemental group ids associated with the current process to groups. groups must be a sequence, and each element must be an integer identifying a group. This operation is typically available only to the superuser. Availability: Unix.  New in version 2.2.   Note On Mac OS X, the length of groups may not exceed the system-defined maximum number of effective group ids, typically 16. See the documentation for getgroups() for cases where it may not return the same group list set by calling setgroups().  "]},
{"name": ["setpgrp"], "description": ["Call the system call setpgrp() or setpgrp(0, 0)() depending on which version is implemented (if any).  See the Unix manual for the semantics. Availability: Unix. "]},
{"name": ["setpgid"], "description": ["Call the system call setpgid() to set the process group id of the process with id pid to the process group with id pgrp.  See the Unix manual for the semantics. Availability: Unix. "]},
{"name": ["setregid"], "description": ["Set the current process's real and effective group ids. Availability: Unix. "]},
{"name": ["setresgid"], "description": ["Set the current process's real, effective, and saved group ids. Availability: Unix.  New in version 2.7.  "]},
{"name": ["setresuid"], "description": ["Set the current process's real, effective, and saved user ids. Availability: Unix.  New in version 2.7.  "]},
{"name": ["setreuid"], "description": ["Set the current process's real and effective user ids. Availability: Unix. "]},
{"name": ["getsid"], "description": ["Call the system call getsid().  See the Unix manual for the semantics. Availability: Unix.  New in version 2.4.  "]},
{"name": ["setsid"], "description": ["Call the system call setsid().  See the Unix manual for the semantics. Availability: Unix. "]},
{"name": ["setuid"], "description": ["Set the current process's user id. Availability: Unix. "]},
{"name": ["strerror"], "description": ["Return the error message corresponding to the error code in code. On platforms where strerror() returns NULL when given an unknown error number, ValueError is raised. Availability: Unix, Windows. "]},
{"name": ["umask"], "description": ["Set the current numeric umask and return the previous umask. Availability: Unix, Windows. "]},
{"name": ["uname"], "description": ["Return a 5-tuple containing information identifying the current operating system.  The tuple contains 5 strings: (sysname, nodename, release, version, machine).  Some systems truncate the nodename to 8 characters or to the leading component; a better way to get the hostname is socket.gethostname()  or even socket.gethostbyaddr(socket.gethostname()). Availability: recent flavors of Unix. "]},
{"name": ["unsetenv"], "description": ["Unset (delete) the environment variable named varname. Such changes to the environment affect subprocesses started with os.system(), popen() or fork() and execv(). When unsetenv() is supported, deletion of items in os.environ is automatically translated into a corresponding call to unsetenv(); however, calls to unsetenv() don't update os.environ, so it is actually preferable to delete items of os.environ. Availability: most flavors of Unix, Windows. "]},
{"name": ["fdopen"], "description": ["Return an open file object connected to the file descriptor fd.  The mode and bufsize arguments have the same meaning as the corresponding arguments to the built-in open() function.  If fdopen() raises an exception, it leaves fd untouched (unclosed). Availability: Unix, Windows.  Changed in version 2.3: When specified, the mode argument must now start with one of the letters 'r', 'w', or 'a', otherwise a ValueError is raised.   Changed in version 2.5: On Unix, when the mode argument starts with 'a', the O_APPEND flag is set on the file descriptor (which the fdopen() implementation already does on most platforms).  "]},
{"name": ["popen"], "description": ["Open a pipe to or from command.  The return value is an open file object connected to the pipe, which can be read or written depending on whether mode is 'r' (default) or 'w'. The bufsize argument has the same meaning as the corresponding argument to the built-in open() function.  The exit status of the command (encoded in the format specified for wait()) is available as the return value of the close() method of the file object, except that when the exit status is zero (termination without errors), None is returned. Availability: Unix, Windows.  Deprecated since version 2.6: This function is obsolete.  Use the subprocess module.  Check especially the Replacing Older Functions with the subprocess Module section.   Changed in version 2.0: This function worked unreliably under Windows in earlier versions of Python. This was due to the use of the _popen() function from the libraries provided with Windows.  Newer versions of Python do not use the broken implementation from the Windows libraries.  "]},
{"name": ["tmpfile"], "description": ["Return a new file object opened in update mode (w+b).  The file has no directory entries associated with it and will be automatically deleted once there are no file descriptors for the file. Availability: Unix, Windows. "]},
{"name": ["popen2"], "description": ["Execute cmd as a sub-process and return the file objects (child_stdin, child_stdout).  Deprecated since version 2.6: This function is obsolete.  Use the subprocess module.  Check especially the Replacing Older Functions with the subprocess Module section.  Availability: Unix, Windows.  New in version 2.0.  "]},
{"name": ["popen3"], "description": ["Execute cmd as a sub-process and return the file objects (child_stdin, child_stdout, child_stderr).  Deprecated since version 2.6: This function is obsolete.  Use the subprocess module.  Check especially the Replacing Older Functions with the subprocess Module section.  Availability: Unix, Windows.  New in version 2.0.  "]},
{"name": ["popen4"], "description": ["Execute cmd as a sub-process and return the file objects (child_stdin, child_stdout_and_stderr).  Deprecated since version 2.6: This function is obsolete.  Use the subprocess module.  Check especially the Replacing Older Functions with the subprocess Module section.  Availability: Unix, Windows.  New in version 2.0.  "]},
{"name": ["close"], "description": ["Close file descriptor fd. Availability: Unix, Windows.  Note This function is intended for low-level I/O and must be applied to a file descriptor as returned by os.open() or pipe().  To close a \"file object\" returned by the built-in function open() or by popen() or fdopen(), use its close() method.  "]},
{"name": ["closerange"], "description": ["Close all file descriptors from fd_low (inclusive) to fd_high (exclusive), ignoring errors. Equivalent to: for fd in xrange(fd_low, fd_high):     try:         os.close(fd)     except OSError:         pass   Availability: Unix, Windows.  New in version 2.6.  "]},
{"name": ["dup"], "description": ["Return a duplicate of file descriptor fd. Availability: Unix, Windows. "]},
{"name": ["dup2"], "description": ["Duplicate file descriptor fd to fd2, closing the latter first if necessary. Availability: Unix, Windows. "]},
{"name": ["fchmod"], "description": ["Change the mode of the file given by fd to the numeric mode.  See the docs for chmod() for possible values of mode. Availability: Unix.  New in version 2.6.  "]},
{"name": ["fchown"], "description": ["Change the owner and group id of the file given by fd to the numeric uid and gid.  To leave one of the ids unchanged, set it to -1. Availability: Unix.  New in version 2.6.  "]},
{"name": ["fdatasync"], "description": ["Force write of file with filedescriptor fd to disk. Does not force update of metadata. Availability: Unix.  Note This function is not available on MacOS.  "]},
{"name": ["fpathconf"], "description": ["Return system configuration information relevant to an open file. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define additional names as well.  The names known to the host operating system are given in the pathconf_names dictionary.  For configuration variables not included in that mapping, passing an integer for name is also accepted. If name is a string and is not known, ValueError is raised.  If a specific value for name is not supported by the host system, even if it is included in pathconf_names, an OSError is raised with errno.EINVAL for the error number. Availability: Unix. "]},
{"name": ["fstat"], "description": ["Return status for file descriptor fd, like stat(). Availability: Unix, Windows. "]},
{"name": ["fstatvfs"], "description": ["Return information about the filesystem containing the file associated with file descriptor fd, like statvfs(). Availability: Unix. "]},
{"name": ["fsync"], "description": ["Force write of file with filedescriptor fd to disk.  On Unix, this calls the native fsync() function; on Windows, the MS _commit() function. If you're starting with a Python file object f, first do f.flush(), and then do os.fsync(f.fileno()), to ensure that all internal buffers associated with f are written to disk. Availability: Unix, and Windows starting in 2.2.3. "]},
{"name": ["ftruncate"], "description": ["Truncate the file corresponding to file descriptor fd, so that it is at most length bytes in size. Availability: Unix. "]},
{"name": ["isatty"], "description": ["Return True if the file descriptor fd is open and connected to a tty(-like) device, else False. "]},
{"name": ["lseek"], "description": ["Set the current position of file descriptor fd to position pos, modified by how: SEEK_SET or 0 to set the position relative to the beginning of the file; SEEK_CUR or 1 to set it relative to the current position; SEEK_END or 2 to set it relative to the end of the file. Return the new cursor position in bytes, starting from the beginning. Availability: Unix, Windows. "]},
{"name": ["SEEK_SETSEEK_CURSEEK_END"], "description": ["Parameters to the lseek() function. Their values are 0, 1, and 2, respectively. Availability: Windows, Unix.  New in version 2.5.  "]},
{"name": ["open"], "description": ["Open the file file and set various flags according to flags and possibly its mode according to mode. The default mode is 0777 (octal), and the current umask value is first masked out.  Return the file descriptor for the newly opened file. For a description of the flag and mode values, see the C run-time documentation; flag constants (like O_RDONLY and O_WRONLY) are defined in this module too (see open() flag constants).  In particular, on Windows adding O_BINARY is needed to open files in binary mode. Availability: Unix, Windows.  Note This function is intended for low-level I/O.  For normal usage, use the built-in function open(), which returns a \"file object\" with read() and write() methods (and many more).  To wrap a file descriptor in a \"file object\", use fdopen().  "]},
{"name": ["openpty"], "description": ["Open a new pseudo-terminal pair. Return a pair of file descriptors (master, slave) for the pty and the tty, respectively. For a (slightly) more portable approach, use the pty module. Availability: some flavors of Unix. "]},
{"name": ["pipe"], "description": ["Create a pipe.  Return a pair of file descriptors (r, w) usable for reading and writing, respectively. Availability: Unix, Windows. "]},
{"name": ["read"], "description": ["Read at most n bytes from file descriptor fd. Return a string containing the bytes read.  If the end of the file referred to by fd has been reached, an empty string is returned. Availability: Unix, Windows.  Note This function is intended for low-level I/O and must be applied to a file descriptor as returned by os.open() or pipe().  To read a \"file object\" returned by the built-in function open() or by popen() or fdopen(), or sys.stdin, use its read() or readline() methods.  "]},
{"name": ["tcgetpgrp"], "description": ["Return the process group associated with the terminal given by fd (an open file descriptor as returned by os.open()). Availability: Unix. "]},
{"name": ["tcsetpgrp"], "description": ["Set the process group associated with the terminal given by fd (an open file descriptor as returned by os.open()) to pg. Availability: Unix. "]},
{"name": ["ttyname"], "description": ["Return a string which specifies the terminal device associated with file descriptor fd.  If fd is not associated with a terminal device, an exception is raised. Availability: Unix. "]},
{"name": ["write"], "description": ["Write the string str to file descriptor fd. Return the number of bytes actually written. Availability: Unix, Windows.  Note This function is intended for low-level I/O and must be applied to a file descriptor as returned by os.open() or pipe().  To write a \"file object\" returned by the built-in function open() or by popen() or fdopen(), or sys.stdout or sys.stderr, use its write() method.  "]},
{"name": ["O_RDONLYO_WRONLYO_RDWRO_APPENDO_CREATO_EXCLO_TRUNC"], "description": ["These constants are available on Unix and Windows. "]},
{"name": ["O_DSYNCO_RSYNCO_SYNCO_NDELAYO_NONBLOCKO_NOCTTYO_SHLOCKO_EXLOCK"], "description": ["These constants are only available on Unix. "]},
{"name": ["O_BINARYO_NOINHERITO_SHORT_LIVEDO_TEMPORARYO_RANDOMO_SEQUENTIALO_TEXT"], "description": ["These constants are only available on Windows. "]},
{"name": ["O_ASYNCO_DIRECTO_DIRECTORYO_NOFOLLOWO_NOATIME"], "description": ["These constants are GNU extensions and not present if they are not defined by the C library. "]},
{"name": ["access"], "description": ["Use the real uid/gid to test for access to path.  Note that most operations will use the effective uid/gid, therefore this routine can be used in a suid/sgid environment to test if the invoking user has the specified access to path.  mode should be F_OK to test the existence of path, or it can be the inclusive OR of one or more of R_OK, W_OK, and X_OK to test permissions.  Return True if access is allowed, False if not. See the Unix man page access(2) for more information. Availability: Unix, Windows.  Note Using access() to check if a user is authorized to e.g. open a file before actually doing so using open() creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it. It's preferable to use EAFP techniques. For example: if os.access(\"myfile\", os.R_OK):     with open(\"myfile\") as fp:         return fp.read() return \"some default data\"   is better written as: try:     fp = open(\"myfile\") except IOError as e:     if e.errno == errno.EACCES:         return \"some default data\"     # Not a permission error.     raise else:     with fp:         return fp.read()     Note I/O operations may fail even when access() indicates that they would succeed, particularly for operations on network filesystems which may have permissions semantics beyond the usual POSIX permission-bit model.  "]},
{"name": ["F_OK"], "description": ["Value to pass as the mode parameter of access() to test the existence of path. "]},
{"name": ["R_OK"], "description": ["Value to include in the mode parameter of access() to test the readability of path. "]},
{"name": ["W_OK"], "description": ["Value to include in the mode parameter of access() to test the writability of path. "]},
{"name": ["X_OK"], "description": ["Value to include in the mode parameter of access() to determine if path can be executed. "]},
{"name": ["chdir"], "description": ["Change the current working directory to path. Availability: Unix, Windows. "]},
{"name": ["fchdir"], "description": ["Change the current working directory to the directory represented by the file descriptor fd.  The descriptor must refer to an opened directory, not an open file. Availability: Unix.  New in version 2.3.  "]},
{"name": ["getcwd"], "description": ["Return a string representing the current working directory. Availability: Unix, Windows. "]},
{"name": ["getcwdu"], "description": ["Return a Unicode object representing the current working directory. Availability: Unix, Windows.  New in version 2.3.  "]},
{"name": ["chflags"], "description": ["Set the flags of path to the numeric flags. flags may take a combination (bitwise OR) of the following values (as defined in the stat module): stat.UF_NODUMP stat.UF_IMMUTABLE stat.UF_APPEND stat.UF_OPAQUE stat.UF_NOUNLINK stat.UF_COMPRESSED stat.UF_HIDDEN stat.SF_ARCHIVED stat.SF_IMMUTABLE stat.SF_APPEND stat.SF_NOUNLINK stat.SF_SNAPSHOT Availability: Unix.  New in version 2.6.  "]},
{"name": ["chroot"], "description": ["Change the root directory of the current process to path. Availability: Unix.  New in version 2.2.  "]},
{"name": ["chmod"], "description": ["Change the mode of path to the numeric mode. mode may take one of the following values (as defined in the stat module) or bitwise ORed combinations of them: stat.S_ISUID stat.S_ISGID stat.S_ENFMT stat.S_ISVTX stat.S_IREAD stat.S_IWRITE stat.S_IEXEC stat.S_IRWXU stat.S_IRUSR stat.S_IWUSR stat.S_IXUSR stat.S_IRWXG stat.S_IRGRP stat.S_IWGRP stat.S_IXGRP stat.S_IRWXO stat.S_IROTH stat.S_IWOTH stat.S_IXOTH Availability: Unix, Windows.  Note Although Windows supports chmod(), you can only  set the file's read-only flag with it (via the stat.S_IWRITE  and stat.S_IREAD constants or a corresponding integer value).  All other bits are ignored.  "]},
{"name": ["chown"], "description": ["Change the owner and group id of path to the numeric uid and gid. To leave one of the ids unchanged, set it to -1. Availability: Unix. "]},
{"name": ["lchflags"], "description": ["Set the flags of path to the numeric flags, like chflags(), but do not follow symbolic links. Availability: Unix.  New in version 2.6.  "]},
{"name": ["lchmod"], "description": ["Change the mode of path to the numeric mode. If path is a symlink, this affects the symlink rather than the target. See the docs for chmod() for possible values of mode. Availability: Unix.  New in version 2.6.  "]},
{"name": ["lchown"], "description": ["Change the owner and group id of path to the numeric uid and gid. This function will not follow symbolic links. Availability: Unix.  New in version 2.3.  "]},
{"name": ["link"], "description": ["Create a hard link pointing to source named link_name. Availability: Unix. "]},
{"name": ["listdir"], "description": ["Return a list containing the names of the entries in the directory given by path.  The list is in arbitrary order.  It does not include the special entries '.' and '..' even if they are present in the directory. Availability: Unix, Windows.  Changed in version 2.3: On Windows NT/2k/XP and Unix, if path is a Unicode object, the result will be a list of Unicode objects. Undecodable filenames will still be returned as string objects.  "]},
{"name": ["lstat"], "description": ["Perform the equivalent of an lstat() system call on the given path. Similar to stat(), but does not follow symbolic links.  On platforms that do not support symbolic links, this is an alias for stat(). "]},
{"name": ["mkfifo"], "description": ["Create a FIFO (a named pipe) named path with numeric mode mode.  The default mode is 0666 (octal).  The current umask value is first masked out from the mode. Availability: Unix. FIFOs are pipes that can be accessed like regular files.  FIFOs exist until they are deleted (for example with os.unlink()). Generally, FIFOs are used as rendezvous between \"client\" and \"server\" type processes: the server opens the FIFO for reading, and the client opens it for writing.  Note that mkfifo() doesn't open the FIFO - it just creates the rendezvous point. "]},
{"name": ["mknod"], "description": ["Create a filesystem node (file, device special file or named pipe) named filename. mode specifies both the permissions to use and the type of node to be created, being combined (bitwise OR) with one of stat.S_IFREG, stat.S_IFCHR, stat.S_IFBLK, and stat.S_IFIFO (those constants are available in stat). For stat.S_IFCHR and stat.S_IFBLK, device defines the newly created device special file (probably using os.makedev()), otherwise it is ignored.  New in version 2.3.  "]},
{"name": ["major"], "description": ["Extract the device major number from a raw device number (usually the st_dev or st_rdev field from stat).  New in version 2.3.  "]},
{"name": ["minor"], "description": ["Extract the device minor number from a raw device number (usually the st_dev or st_rdev field from stat).  New in version 2.3.  "]},
{"name": ["makedev"], "description": ["Compose a raw device number from the major and minor device numbers.  New in version 2.3.  "]},
{"name": ["mkdir"], "description": ["Create a directory named path with numeric mode mode. The default mode is 0777 (octal).  On some systems, mode is ignored.  Where it is used, the current umask value is first masked out.  If the directory already exists, OSError is raised. It is also possible to create temporary directories; see the tempfile module's tempfile.mkdtemp() function. Availability: Unix, Windows. "]},
{"name": ["makedirs"], "description": ["Recursive directory creation function.  Like mkdir(), but makes all intermediate-level directories needed to contain the leaf directory.  Raises an error exception if the leaf directory already exists or cannot be created.  The default mode is 0777 (octal).  On some systems, mode is ignored. Where it is used, the current umask value is first masked out.  Note makedirs() will become confused if the path elements to create include os.pardir.   New in version 1.5.2.   Changed in version 2.3: This function now handles UNC paths correctly.  "]},
{"name": ["pathconf"], "description": ["Return system configuration information relevant to a named file. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define additional names as well.  The names known to the host operating system are given in the pathconf_names dictionary.  For configuration variables not included in that mapping, passing an integer for name is also accepted. If name is a string and is not known, ValueError is raised.  If a specific value for name is not supported by the host system, even if it is included in pathconf_names, an OSError is raised with errno.EINVAL for the error number. Availability: Unix. "]},
{"name": ["pathconf_names"], "description": ["Dictionary mapping names accepted by pathconf() and fpathconf() to the integer values defined for those names by the host operating system.  This can be used to determine the set of names known to the system. Availability: Unix. "]},
{"name": ["readlink"], "description": ["Return a string representing the path to which the symbolic link points.  The result may be either an absolute or relative pathname; if it is relative, it may be converted to an absolute pathname using os.path.join(os.path.dirname(path), result).  Changed in version 2.6: If the path is a Unicode object the result will also be a Unicode object.  Availability: Unix. "]},
{"name": ["remove"], "description": ["Remove (delete) the file path.  If path is a directory, OSError is raised; see rmdir() below to remove a directory.  This is identical to the unlink() function documented below.  On Windows, attempting to remove a file that is in use causes an exception to be raised; on Unix, the directory entry is removed but the storage allocated to the file is not made available until the original file is no longer in use. Availability: Unix, Windows. "]},
{"name": ["removedirs"], "description": ["Remove directories recursively.  Works like rmdir() except that, if the leaf directory is successfully removed, removedirs()  tries to successively remove every parent directory mentioned in  path until an error is raised (which is ignored, because it generally means that a parent directory is not empty). For example, os.removedirs('foo/bar/baz') will first remove the directory 'foo/bar/baz', and then remove 'foo/bar' and 'foo' if they are empty. Raises OSError if the leaf directory could not be successfully removed.  New in version 1.5.2.  "]},
{"name": ["rename"], "description": ["Rename the file or directory src to dst.  If dst is a directory, OSError will be raised.  On Unix, if dst exists and is a file, it will be replaced silently if the user has permission.  The operation may fail on some Unix flavors if src and dst are on different filesystems.  If successful, the renaming will be an atomic operation (this is a POSIX requirement).  On Windows, if dst already exists, OSError will be raised even if it is a file; there may be no way to implement an atomic rename when dst names an existing file. Availability: Unix, Windows. "]},
{"name": ["renames"], "description": ["Recursive directory or file renaming function. Works like rename(), except creation of any intermediate directories needed to make the new pathname good is attempted first. After the rename, directories corresponding to rightmost path segments of the old name will be pruned away using removedirs().  New in version 1.5.2.   Note This function can fail with the new directory structure made if you lack permissions needed to remove the leaf directory or file.  "]},
{"name": ["rmdir"], "description": ["Remove (delete) the directory path.  Only works when the directory is empty, otherwise, OSError is raised.  In order to remove whole directory trees, shutil.rmtree() can be used. Availability: Unix, Windows. "]},
{"name": ["stat"], "description": ["Perform the equivalent of a stat() system call on the given path. (This function follows symlinks; to stat a symlink use lstat().) The return value is an object whose attributes correspond to the members of the stat structure, namely: st_mode - protection bits, st_ino - inode number, st_dev - device, st_nlink - number of hard links, st_uid - user id of owner, st_gid - group id of owner, st_size - size of file, in bytes, st_atime - time of most recent access, st_mtime - time of most recent content modification, st_ctime - platform dependent; time of most recent metadata change on Unix, or the time of creation on Windows)  Changed in version 2.3: If stat_float_times() returns True, the time values are floats, measuring seconds. Fractions of a second may be reported if the system supports that. See stat_float_times() for further discussion.  On some Unix systems (such as Linux), the following attributes may also be available: st_blocks - number of 512-byte blocks allocated for file st_blksize - filesystem blocksize for efficient file system I/O st_rdev - type of device if an inode device st_flags - user defined flags for file On other Unix systems (such as FreeBSD), the following attributes may be available (but may be only filled out if root tries to use them): st_gen - file generation number st_birthtime - time of file creation On RISCOS systems, the following attributes are also available: st_ftype (file type) st_attrs (attributes) st_obtype (object type).  Note The exact meaning and resolution of the st_atime, st_mtime, and st_ctime attributes depend on the operating system and the file system. For example, on Windows systems using the FAT or FAT32 file systems, st_mtime has 2-second resolution, and st_atime has only 1-day resolution.  See your operating system documentation for details.  For backward compatibility, the return value of stat() is also accessible as a tuple of at least 10 integers giving the most important (and portable) members of the stat structure, in the order st_mode, st_ino, st_dev, st_nlink, st_uid, st_gid, st_size, st_atime, st_mtime, st_ctime. More items may be added at the end by some implementations. The standard module stat defines functions and constants that are useful for extracting information from a stat structure. (On Windows, some items are filled with dummy values.) Example: >>> import os >>> statinfo = os.stat('somefile.txt') >>> statinfo (33188, 422511, 769, 1, 1032, 100, 926, 1105022698,1105022732, 1105022732) >>> statinfo.st_size 926   Availability: Unix, Windows.  Changed in version 2.2: Added access to values as attributes of the returned object.   Changed in version 2.5: Added st_gen and st_birthtime.  "]},
{"name": ["stat_float_times"], "description": ["Determine whether stat_result represents time stamps as float objects. If newvalue is True, future calls to stat() return floats, if it is False, future calls return ints. If newvalue is omitted, return the current setting. For compatibility with older Python versions, accessing stat_result as a tuple always returns integers.  Changed in version 2.5: Python now returns float values by default. Applications which do not work correctly with floating point time stamps can use this function to restore the old behaviour.  The resolution of the timestamps (that is the smallest possible fraction) depends on the system. Some systems only support second resolution; on these systems, the fraction will always be zero. It is recommended that this setting is only changed at program startup time in the __main__ module; libraries should never change this setting. If an application uses a library that works incorrectly if floating point time stamps are processed, this application should turn the feature off until the library has been corrected. "]},
{"name": ["statvfs"], "description": ["Perform a statvfs() system call on the given path.  The return value is an object whose attributes describe the filesystem on the given path, and correspond to the members of the statvfs structure, namely: f_bsize, f_frsize, f_blocks, f_bfree, f_bavail, f_files, f_ffree, f_favail, f_flag, f_namemax. For backward compatibility, the return value is also accessible as a tuple whose values correspond to the attributes, in the order given above. The standard module statvfs defines constants that are useful for extracting information from a statvfs structure when accessing it as a sequence; this remains useful when writing code that needs to work with versions of Python that don't support accessing the fields as attributes. Availability: Unix.  Changed in version 2.2: Added access to values as attributes of the returned object.  "]},
{"name": ["symlink"], "description": ["Create a symbolic link pointing to source named link_name. Availability: Unix. "]},
{"name": ["tempnam"], "description": ["Return a unique path name that is reasonable for creating a temporary file. This will be an absolute path that names a potential directory entry in the directory dir or a common location for temporary files if dir is omitted or None.  If given and not None, prefix is used to provide a short prefix to the filename.  Applications are responsible for properly creating and managing files created using paths returned by tempnam(); no automatic cleanup is provided. On Unix, the environment variable TMPDIR overrides dir, while on Windows TMP is used.  The specific behavior of this function depends on the C library implementation; some aspects are underspecified in system documentation.  Warning Use of tempnam() is vulnerable to symlink attacks; consider using tmpfile() (section File Object Creation) instead.  Availability: Unix, Windows. "]},
{"name": ["tmpnam"], "description": ["Return a unique path name that is reasonable for creating a temporary file. This will be an absolute path that names a potential directory entry in a common location for temporary files.  Applications are responsible for properly creating and managing files created using paths returned by tmpnam(); no automatic cleanup is provided.  Warning Use of tmpnam() is vulnerable to symlink attacks; consider using tmpfile() (section File Object Creation) instead.  Availability: Unix, Windows.  This function probably shouldn't be used on Windows, though: Microsoft's implementation of tmpnam() always creates a name in the root directory of the current drive, and that's generally a poor location for a temp file (depending on privileges, you may not even be able to open a file using this name). "]},
{"name": ["TMP_MAX"], "description": ["The maximum number of unique names that tmpnam() will generate before reusing names. "]},
{"name": ["unlink"], "description": ["Remove (delete) the file path.  This is the same function as remove(); the unlink() name is its traditional Unix name. Availability: Unix, Windows. "]},
{"name": ["utime"], "description": ["Set the access and modified times of the file specified by path. If times is None, then the file's access and modified times are set to the current time. (The effect is similar to running the Unix program touch on the path.)  Otherwise, times must be a 2-tuple of numbers, of the form (atime, mtime) which is used to set the access and modified times, respectively. Whether a directory can be given for path depends on whether the operating system implements directories as files (for example, Windows does not).  Note that the exact times you set here may not be returned by a subsequent stat() call, depending on the resolution with which your operating system records access and modification times; see stat().  Changed in version 2.0: Added support for None for times.  Availability: Unix, Windows. "]},
{"name": ["walk"], "description": ["Generate the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the tree rooted at directory top (including top itself), it yields a 3-tuple (dirpath, dirnames, filenames). dirpath is a string, the path to the directory.  dirnames is a list of the names of the subdirectories in dirpath (excluding '.' and '..'). filenames is a list of the names of the non-directory files in dirpath. Note that the names in the lists contain no path components.  To get a full path (which begins with top) to a file or directory in dirpath, do os.path.join(dirpath, name). If optional argument topdown is True or not specified, the triple for a directory is generated before the triples for any of its subdirectories (directories are generated top-down).  If topdown is False, the triple for a directory is generated after the triples for all of its subdirectories (directories are generated bottom-up). No matter the value of topdown, the list of subdirectories is retrieved before the tuples for the directory and its subdirectories are generated. When topdown is True, the caller can modify the dirnames list in-place (perhaps using del or slice assignment), and walk() will only recurse into the subdirectories whose names remain in dirnames; this can be used to prune the search, impose a specific order of visiting, or even to inform walk() about directories the caller creates or renames before it resumes walk() again.  Modifying dirnames when topdown is False is ineffective, because in bottom-up mode the directories in dirnames are generated before dirpath itself is generated. By default, errors from the listdir() call are ignored.  If optional argument onerror is specified, it should be a function; it will be called with one argument, an OSError instance.  It can report the error to continue with the walk, or raise the exception to abort the walk.  Note that the filename is available as the filename attribute of the exception object. By default, walk() will not walk down into symbolic links that resolve to directories. Set followlinks to True to visit directories pointed to by symlinks, on systems that support them.  New in version 2.6: The followlinks parameter.   Note Be aware that setting followlinks to True can lead to infinite recursion if a link points to a parent directory of itself. walk() does not keep track of the directories it visited already.   Note If you pass a relative pathname, don't change the current working directory between resumptions of walk().  walk() never changes the current directory, and assumes that its caller doesn't either.  This example displays the number of bytes taken by non-directory files in each directory under the starting directory, except that it doesn't look under any CVS subdirectory: import os from os.path import join, getsize for root, dirs, files in os.walk('python/Lib/email'):     print root, \"consumes\",     print sum(getsize(join(root, name)) for name in files),     print \"bytes in\", len(files), \"non-directory files\"     if 'CVS' in dirs:         dirs.remove('CVS')  # don't visit CVS directories   In the next example, walking the tree bottom-up is essential: rmdir() doesn't allow deleting a directory before the directory is empty: # Delete everything reachable from the directory named in \"top\", # assuming there are no symbolic links. # CAUTION:  This is dangerous!  For example, if top == '/', it # could delete all your disk files. import os for root, dirs, files in os.walk(top, topdown=False):     for name in files:         os.remove(os.path.join(root, name))     for name in dirs:         os.rmdir(os.path.join(root, name))    New in version 2.3.  "]},
{"name": ["abort"], "description": ["Generate a SIGABRT signal to the current process.  On Unix, the default behavior is to produce a core dump; on Windows, the process immediately returns an exit code of 3.  Be aware that calling this function will not call the Python signal handler registered for SIGABRT with signal.signal(). Availability: Unix, Windows. "]},
{"name": ["execlexecleexeclpexeclpeexecvexecveexecvpexecvpe"], "description": ["These functions all execute a new program, replacing the current process; they do not return.  On Unix, the new executable is loaded into the current process, and will have the same process id as the caller.  Errors will be reported as OSError exceptions. The current process is replaced immediately. Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using sys.stdout.flush() or os.fsync() before calling an exec* function. The \"l\" and \"v\" variants of the exec* functions differ in how command-line arguments are passed.  The \"l\" variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the execl*() functions.  The \"v\" variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.  In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced. The variants which include a \"p\" near the end (execlp(), execlpe(), execvp(), and execvpe()) will use the PATH environment variable to locate the program file.  When the environment is being replaced (using one of the exec*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable. The other variants, execl(), execle(), execv(), and execve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path. For execle(), execlpe(), execve(), and execvpe() (note that these all end in \"e\"), the env parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process' environment); the functions execl(), execlp(), execv(), and execvp() all cause the new process to inherit the environment of the current process. Availability: Unix, Windows. "]},
{"name": ["_exit"], "description": ["Exit the process with status n, without calling cleanup handlers, flushing stdio buffers, etc. Availability: Unix, Windows.  Note The standard way to exit is sys.exit(n).  _exit() should normally only be used in the child process after a fork().  "]},
{"name": ["EX_OK"], "description": ["Exit code that means no error occurred. Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_USAGE"], "description": ["Exit code that means the command was used incorrectly, such as when the wrong number of arguments are given. Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_DATAERR"], "description": ["Exit code that means the input data was incorrect. Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_NOINPUT"], "description": ["Exit code that means an input file did not exist or was not readable. Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_NOUSER"], "description": ["Exit code that means a specified user did not exist. Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_NOHOST"], "description": ["Exit code that means a specified host did not exist. Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_UNAVAILABLE"], "description": ["Exit code that means that a required service is unavailable. Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_SOFTWARE"], "description": ["Exit code that means an internal software error was detected. Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_OSERR"], "description": ["Exit code that means an operating system error was detected, such as the inability to fork or create a pipe. Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_OSFILE"], "description": ["Exit code that means some system file did not exist, could not be opened, or had some other kind of error. Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_CANTCREAT"], "description": ["Exit code that means a user specified output file could not be created. Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_IOERR"], "description": ["Exit code that means that an error occurred while doing I/O on some file. Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_TEMPFAIL"], "description": ["Exit code that means a temporary failure occurred.  This indicates something that may not really be an error, such as a network connection that couldn't be made during a retryable operation. Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_PROTOCOL"], "description": ["Exit code that means that a protocol exchange was illegal, invalid, or not understood. Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_NOPERM"], "description": ["Exit code that means that there were insufficient permissions to perform the operation (but not intended for file system problems). Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_CONFIG"], "description": ["Exit code that means that some kind of configuration error occurred. Availability: Unix.  New in version 2.3.  "]},
{"name": ["EX_NOTFOUND"], "description": ["Exit code that means something like \"an entry was not found\". Availability: Unix.  New in version 2.3.  "]},
{"name": ["fork"], "description": ["Fork a child process.  Return 0 in the child and the child's process id in the parent.  If an error occurs OSError is raised. Note that some platforms including FreeBSD <= 6.3, Cygwin and OS/2 EMX have known issues when using fork() from a thread.  Warning See ssl for applications that use the SSL module with fork().  Availability: Unix. "]},
{"name": ["forkpty"], "description": ["Fork a child process, using a new pseudo-terminal as the child's controlling terminal. Return a pair of (pid, fd), where pid is 0 in the child, the new child's process id in the parent, and fd is the file descriptor of the master end of the pseudo-terminal.  For a more portable approach, use the pty module.  If an error occurs OSError is raised. Availability: some flavors of Unix. "]},
{"name": ["kill"], "description": ["Send signal sig to the process pid.  Constants for the specific signals available on the host platform are defined in the signal module. Windows: The signal.CTRL_C_EVENT and signal.CTRL_BREAK_EVENT signals are special signals which can only be sent to console processes which share a common console window, e.g., some subprocesses. Any other value for sig will cause the process to be unconditionally killed by the TerminateProcess API, and the exit code will be set to sig. The Windows version of kill() additionally takes process handles to be killed.  New in version 2.7: Windows support  "]},
{"name": ["killpg"], "description": ["Send the signal sig to the process group pgid. Availability: Unix.  New in version 2.3.  "]},
{"name": ["nice"], "description": ["Add increment to the process's \"niceness\".  Return the new niceness. Availability: Unix. "]},
{"name": ["plock"], "description": ["Lock program segments into memory.  The value of op (defined in <sys/lock.h>) determines which segments are locked. Availability: Unix. "]},
{"name": ["popenpopen2popen3popen4"], "description": ["Run child processes, returning opened pipes for communications.  These functions are described in section File Object Creation. "]},
{"name": ["spawnlspawnlespawnlpspawnlpespawnvspawnvespawnvpspawnvpe"], "description": ["Execute the program path in a new process. (Note that the subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions.  Check especially the Replacing Older Functions with the subprocess Module section.) If mode is P_NOWAIT, this function returns the process id of the new process; if mode is P_WAIT, returns the process's exit code if it exits normally, or -signal, where signal is the signal that killed the process.  On Windows, the process id will actually be the process handle, so can be used with the waitpid() function. The \"l\" and \"v\" variants of the spawn* functions differ in how command-line arguments are passed.  The \"l\" variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the spawnl*() functions.  The \"v\" variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.  In either case, the arguments to the child process must start with the name of the command being run. The variants which include a second \"p\" near the end (spawnlp(), spawnlpe(), spawnvp(), and spawnvpe()) will use the PATH environment variable to locate the program file.  When the environment is being replaced (using one of the spawn*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.  The other variants, spawnl(), spawnle(), spawnv(), and spawnve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path. For spawnle(), spawnlpe(), spawnve(), and spawnvpe() (note that these all end in \"e\"), the env parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process' environment); the functions spawnl(), spawnlp(), spawnv(), and spawnvp() all cause the new process to inherit the environment of the current process.  Note that keys and values in the env dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of 127. As an example, the following calls to spawnlp() and spawnvpe() are equivalent: import os os.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')  L = ['cp', 'index.html', '/dev/null'] os.spawnvpe(os.P_WAIT, 'cp', L, os.environ)   Availability: Unix, Windows.  spawnlp(), spawnlpe(), spawnvp() and spawnvpe() are not available on Windows.  spawnle() and spawnve() are not thread-safe on Windows; we advise you to use the subprocess module instead.  New in version 1.6.  "]},
{"name": ["P_NOWAITP_NOWAITO"], "description": ["Possible values for the mode parameter to the spawn* family of functions.  If either of these values is given, the spawn*() functions will return as soon as the new process has been created, with the process id as the return value. Availability: Unix, Windows.  New in version 1.6.  "]},
{"name": ["P_WAIT"], "description": ["Possible value for the mode parameter to the spawn* family of functions.  If this is given as mode, the spawn*() functions will not return until the new process has run to completion and will return the exit code of the process the run is successful, or -signal if a signal kills the process. Availability: Unix, Windows.  New in version 1.6.  "]},
{"name": ["P_DETACHP_OVERLAY"], "description": ["Possible values for the mode parameter to the spawn* family of functions.  These are less portable than those listed above. P_DETACH is similar to P_NOWAIT, but the new process is detached from the console of the calling process. If P_OVERLAY is used, the current process will be replaced; the spawn*() function will not return. Availability: Windows.  New in version 1.6.  "]},
{"name": ["startfile"], "description": ["Start a file with its associated application. When operation is not specified or 'open', this acts like double-clicking the file in Windows Explorer, or giving the file name as an argument to the start command from the interactive command shell: the file is opened with whatever application (if any) its extension is associated. When another operation is given, it must be a \"command verb\" that specifies what should be done with the file. Common verbs documented by Microsoft are 'print' and  'edit' (to be used on files) as well as 'explore' and 'find' (to be used on directories). startfile() returns as soon as the associated application is launched. There is no option to wait for the application to close, and no way to retrieve the application's exit status.  The path parameter is relative to the current directory.  If you want to use an absolute path, make sure the first character is not a slash ('/'); the underlying Win32 ShellExecute() function doesn't work if it is.  Use the os.path.normpath() function to ensure that the path is properly encoded for Win32. Availability: Windows.  New in version 2.0.   New in version 2.5: The operation parameter.  "]},
{"name": ["system"], "description": ["Execute the command (a string) in a subshell.  This is implemented by calling the Standard C function system(), and has the same limitations. Changes to sys.stdin, etc. are not reflected in the environment of the executed command. On Unix, the return value is the exit status of the process encoded in the format specified for wait().  Note that POSIX does not specify the meaning of the return value of the C system() function, so the return value of the Python function is system-dependent. On Windows, the return value is that returned by the system shell after running command, given by the Windows environment variable COMSPEC: on command.com systems (Windows 95, 98 and ME) this is always 0; on cmd.exe systems (Windows NT, 2000 and XP) this is the exit status of the command run; on systems using a non-native shell, consult your shell documentation. The subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function.  See the Replacing Older Functions with the subprocess Module section in the subprocess documentation for some helpful recipes. Availability: Unix, Windows. "]},
{"name": ["times"], "description": ["Return a 5-tuple of floating point numbers indicating accumulated (processor or other) times, in seconds.  The items are: user time, system time, children's user time, children's system time, and elapsed real time since a fixed point in the past, in that order.  See the Unix manual page times(2) or the corresponding Windows Platform API documentation. On Windows, only the first two items are filled, the others are zero. Availability: Unix, Windows "]},
{"name": ["wait"], "description": ["Wait for completion of a child process, and return a tuple containing its pid and exit status indication: a 16-bit number, whose low byte is the signal number that killed the process, and whose high byte is the exit status (if the signal number is zero); the high bit of the low byte is set if a core file was produced. Availability: Unix. "]},
{"name": ["waitpid"], "description": ["The details of this function differ on Unix and Windows. On Unix: Wait for completion of a child process given by process id pid, and return a tuple containing its process id and exit status indication (encoded as for wait()).  The semantics of the call are affected by the value of the integer options, which should be 0 for normal operation. If pid is greater than 0, waitpid() requests status information for that specific process.  If pid is 0, the request is for the status of any child in the process group of the current process.  If pid is -1, the request pertains to any child of the current process.  If pid is less than -1, status is requested for any process in the process group -pid (the absolute value of pid). An OSError is raised with the value of errno when the syscall returns -1. On Windows: Wait for completion of a process given by process handle pid, and return a tuple containing pid, and its exit status shifted left by 8 bits (shifting makes cross-platform use of the function easier). A pid less than or equal to 0 has no special meaning on Windows, and raises an exception. The value of integer options has no effect. pid can refer to any process whose id is known, not necessarily a child process. The spawn* functions called with P_NOWAIT return suitable process handles. "]},
{"name": ["wait3"], "description": ["Similar to waitpid(), except no process id argument is given and a 3-element tuple containing the child's process id, exit status indication, and resource usage information is returned.  Refer to resource.getrusage() for details on resource usage information.  The option argument is the same as that provided to waitpid() and wait4(). Availability: Unix.  New in version 2.5.  "]},
{"name": ["wait4"], "description": ["Similar to waitpid(), except a 3-element tuple, containing the child's process id, exit status indication, and resource usage information is returned. Refer to resource.getrusage() for details on resource usage information.  The arguments to wait4() are the same as those provided to waitpid(). Availability: Unix.  New in version 2.5.  "]},
{"name": ["WNOHANG"], "description": ["The option for waitpid() to return immediately if no child process status is available immediately. The function returns (0, 0) in this case. Availability: Unix. "]},
{"name": ["WCONTINUED"], "description": ["This option causes child processes to be reported if they have been continued from a job control stop since their status was last reported. Availability: Some Unix systems.  New in version 2.3.  "]},
{"name": ["WUNTRACED"], "description": ["This option causes child processes to be reported if they have been stopped but their current state has not been reported since they were stopped. Availability: Unix.  New in version 2.3.  "]},
{"name": ["WCOREDUMP"], "description": ["Return True if a core dump was generated for the process, otherwise return False. Availability: Unix.  New in version 2.3.  "]},
{"name": ["WIFCONTINUED"], "description": ["Return True if the process has been continued from a job control stop, otherwise return False. Availability: Unix.  New in version 2.3.  "]},
{"name": ["WIFSTOPPED"], "description": ["Return True if the process has been stopped, otherwise return False. Availability: Unix. "]},
{"name": ["WIFSIGNALED"], "description": ["Return True if the process exited due to a signal, otherwise return False. Availability: Unix. "]},
{"name": ["WIFEXITED"], "description": ["Return True if the process exited using the exit(2) system call, otherwise return False. Availability: Unix. "]},
{"name": ["WEXITSTATUS"], "description": ["If WIFEXITED(status) is true, return the integer parameter to the exit(2) system call.  Otherwise, the return value is meaningless. Availability: Unix. "]},
{"name": ["WSTOPSIG"], "description": ["Return the signal which caused the process to stop. Availability: Unix. "]},
{"name": ["WTERMSIG"], "description": ["Return the signal which caused the process to exit. Availability: Unix. "]},
{"name": ["confstr"], "description": ["Return string-valued system configuration values. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX, Unix 95, Unix 98, and others).  Some platforms define additional names as well. The names known to the host operating system are given as the keys of the confstr_names dictionary.  For configuration variables not included in that mapping, passing an integer for name is also accepted. If the configuration value specified by name isn't defined, None is returned. If name is a string and is not known, ValueError is raised.  If a specific value for name is not supported by the host system, even if it is included in confstr_names, an OSError is raised with errno.EINVAL for the error number. Availability: Unix "]},
{"name": ["confstr_names"], "description": ["Dictionary mapping names accepted by confstr() to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system. Availability: Unix. "]},
{"name": ["getloadavg"], "description": ["Return the number of processes in the system run queue averaged over the last 1, 5, and 15 minutes or raises OSError if the load average was unobtainable. Availability: Unix.  New in version 2.3.  "]},
{"name": ["sysconf"], "description": ["Return integer-valued system configuration values. If the configuration value specified by name isn't defined, -1 is returned.  The comments regarding the name parameter for confstr() apply here as well; the dictionary that provides information on the known names is given by sysconf_names. Availability: Unix. "]},
{"name": ["sysconf_names"], "description": ["Dictionary mapping names accepted by sysconf() to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system. Availability: Unix. "]},
{"name": ["curdir"], "description": ["The constant string used by the operating system to refer to the current directory. This is '.' for Windows and POSIX. Also available via os.path. "]},
{"name": ["pardir"], "description": ["The constant string used by the operating system to refer to the parent directory. This is '..' for Windows and POSIX. Also available via os.path. "]},
{"name": ["sep"], "description": ["The character used by the operating system to separate pathname components. This is '/' for POSIX and '\\\\' for Windows.  Note that knowing this is not sufficient to be able to parse or concatenate pathnames - use os.path.split() and os.path.join() - but it is occasionally useful. Also available via os.path. "]},
{"name": ["altsep"], "description": ["An alternative character used by the operating system to separate pathname components, or None if only one separator character exists.  This is set to '/' on Windows systems where sep is a backslash. Also available via os.path. "]},
{"name": ["extsep"], "description": ["The character which separates the base filename from the extension; for example, the '.' in os.py. Also available via os.path.  New in version 2.2.  "]},
{"name": ["pathsep"], "description": ["The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows. Also available via os.path. "]},
{"name": ["defpath"], "description": ["The default search path used by exec*p* and spawn*p* if the environment doesn't have a 'PATH' key. Also available via os.path. "]},
{"name": ["linesep"], "description": ["The string used to separate (or, rather, terminate) lines on the current platform.  This may be a single character, such as '\ ' for POSIX, or multiple characters, for example, '\\r\ ' for Windows. Do not use os.linesep as a line terminator when writing files opened in text mode (the default); use a single '\ ' instead, on all platforms. "]},
{"name": ["devnull"], "description": ["The file path of the null device. For example: '/dev/null' for POSIX, 'nul' for Windows.  Also available via os.path.  New in version 2.4.  "]},
{"name": ["urandom"], "description": ["Return a string of n random bytes suitable for cryptographic use. This function returns random bytes from an OS-specific randomness source.  The returned data should be unpredictable enough for cryptographic applications, though its exact quality depends on the OS implementation.  On a UNIX-like system this will query /dev/urandom, and on Windows it will use CryptGenRandom().  If a randomness source is not found, NotImplementedError will be raised. For an easy-to-use interface to the random number generator provided by your platform, please see random.SystemRandom.  New in version 2.4.  "]}];

chrome.extension.sendMessage({}, function(response) {
	var readyStateCheckInterval = setInterval(function() {
	if (document.readyState === "complete") {
		clearInterval(readyStateCheckInterval);

		// ----------------------------------------------------------
		// This part of the script triggers when page is done loading
		console.log("Hello. This message was sent from scripts/inject.js");
		// ----------------------------------------------------------

	}
	}, 10);
});

f = function(e) {
	var _query = window.getSelection().toString().toLowerCase();

	console.log("query: " + _query + " len: " + _query.length);
	var _last_var_x = e.pageX - 100;
	var _last_var_y = e.pageY + 10;
	//console.log("x: " + _last_var_x + " y: " + _last_var_y);
	var _query_result = '';
	var _link = '';
	for(var i = 0; i < items.length; i++){
		//console.log(items[i].name[0]);
		if(items[i].name[0] == _query){

			var _a = items[i].description[0].indexOf('.');
			_query_result = items[i].description[0].substring(0, _a + 1);
			_link = "https://docs.python.org/2/library/functions.html#" + _query;

			var test = '<div id="gdx-bubble-host">/* Copyright 2014 Google Inc. All Rights Reserved. */<div id="gdx-bubble-main" style="left: ' + _last_var_x + 'px; top: '+ _last_var_y + 'px;"><div id="gdx-bubble-query-row" class=""><div id="gdx-bubble-query">' + _query + '</div></div><div id="gdx-bubble-meaning">' + _query_result + '</div><div id="gdx-bubble-attribution" class="display-none"><a target="_blank"></a><div></div></div><div id="gdx-bubble-more" class=""><a target="_blank" href=' + _link + '>More »</a></div></div><div></div></div>';
			$(document.body).append(test);
		}
	}

}
//removing boxes on click off
g = function(e) {
	$("#gdx-bubble-host").remove();
}

console.log(items);
var _last_var_x = 0;
var _last_var_y = 0;

document.body.addEventListener('dblclick', f);
$(document.body).click(g);


//id = gdx-bubble-main